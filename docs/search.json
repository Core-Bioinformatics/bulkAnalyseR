[{"path":"/articles/bulkAnalyseR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"install package, first install CRAN dependencies: install bioconductor dependencies: Finally, can install package CRAN, install latest stable version bulkAnalyseR GitHub:","code":"packages.cran <- c(   \"ggplot2\", \"shiny\", \"shinythemes\", \"gprofiler2\", \"stats\", \"ggrepel\",   \"utils\", \"RColorBrewer\", \"circlize\", \"shinyWidgets\", \"shinyjqui\",   \"dplyr\", \"magrittr\", \"ggforce\", \"rlang\", \"glue\", \"matrixStats\",   \"noisyr\", \"tibble\", \"ggnewscale\", \"ggrastr\", \"visNetwork\", \"shinyLP\",   \"grid\", \"DT\", \"scales\", \"shinyjs\", \"tidyr\", \"UpSetR\", \"ggVennDiagram\" ) new.packages.cran <- packages.cran[!(packages.cran %in% installed.packages()[, \"Package\"])] if(length(new.packages.cran))   install.packages(new.packages.cran) packages.bioc <- c(   \"edgeR\", \"DESeq2\", \"preprocessCore\", \"GENIE3\", \"ComplexHeatmap\" ) new.packages.bioc <- packages.bioc[!(packages.bioc %in% installed.packages()[,\"Package\"])] if(length(new.packages.bioc)){   if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")   BiocManager::install(new.packages.bioc) } install.packages(\"bulkAnalyseR\")  ### OR  if (!requireNamespace(\"devtools\", quietly = TRUE))   install.packages(\"devtools\")  devtools::install_github(\"Core-Bioinformatics/bulkAnalyseR\")"},{"path":"/articles/bulkAnalyseR.html","id":"preprocessing","dir":"Articles","previous_headings":"","what":"Preprocessing","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"First, load bulkAnalyseR (plus dplyr ggplot2 convenience):","code":"library(bulkAnalyseR) library(dplyr) ##> Warning: package 'dplyr' was built under R version 4.1.2 ##>  ##> Attaching package: 'dplyr' ##> The following objects are masked from 'package:stats': ##>  ##>     filter, lag ##> The following objects are masked from 'package:base': ##>  ##>     intersect, setdiff, setequal, union library(ggplot2)"},{"path":"/articles/bulkAnalyseR.html","id":"loading-an-expression-matrix","dir":"Articles","previous_headings":"Preprocessing","what":"Loading an expression matrix","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"vignette using subset count matrix experiment included 2019 paper Yang et al. Rows represent genes/features columns represent samples:","code":"counts.in <- system.file(\"extdata\", \"expression_matrix.csv\", package = \"bulkAnalyseR\") exp <- as.matrix(read.csv(counts.in, row.names = 1)) head(exp) ##>                    SRR7624365 SRR7624366 SRR7624371 SRR7624372 SRR7624375 ##> ENSMUSG00000102693          2          0          0          0          0 ##> ENSMUSG00000051951          6          4          2          0         47 ##> ENSMUSG00000102851          0          0          0          0          0 ##> ENSMUSG00000103377          0          0          2          0          8 ##> ENSMUSG00000104017          0          0          0          2          0 ##> ENSMUSG00000103025          0          0          0          0          0 ##>                    SRR7624376 ##> ENSMUSG00000102693          0 ##> ENSMUSG00000051951         37 ##> ENSMUSG00000102851          1 ##> ENSMUSG00000103377          6 ##> ENSMUSG00000104017          2 ##> ENSMUSG00000103025          3"},{"path":"/articles/bulkAnalyseR.html","id":"defining-metadata","dir":"Articles","previous_headings":"Preprocessing","what":"Defining metadata","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"subset dataset using samples 3 timepoints: 0h, 12h 36h, 2 biological replicates. define metadata table detailing sample correspond timepoint: metadata table data frame containing minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression.","code":"meta <- data.frame(   srr = colnames(exp),    timepoint = rep(c(\"0h\", \"12h\", \"36h\"), each = 2) ) meta ##>          srr timepoint ##> 1 SRR7624365        0h ##> 2 SRR7624366        0h ##> 3 SRR7624371       12h ##> 4 SRR7624372       12h ##> 5 SRR7624375       36h ##> 6 SRR7624376       36h"},{"path":"/articles/bulkAnalyseR.html","id":"denoising-and-normalisation","dir":"Articles","previous_headings":"Preprocessing","what":"Denoising and normalisation","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"using expression matrix create shiny app, preprocessing performed. bulkAnalyseR contains function preprocessExpressionMatrix takes expression matrix input denoises data using noisyR normalises (quantile normalisation default, methods can bespecified using normalisation.method parameter). specifying output.plot = TRUE, can also print expression-similarity line plots noisyR console can specify parameters noisyR noisyr_counts.  recommended use data denoised normalised input generateShinyApp. can also perform preprocessing outside preprocessExpressionMatrix.","code":"exp.proc <- preprocessExpressionMatrix(exp, output.plot = TRUE) ##> >>> noisyR counts approach pipeline <<< ##> The input matrix has 38705 rows and 6 cols ##>     number of genes: 38705 ##>     number of samples: 6 ##> Calculating the number of elements per window ##>     the number of elements per window is 3870 ##>     the step size is 193 ##>     the selected similarity metric is correlation_pearson ##>   Working with sample 1 ##>   Working with sample 2 ##>   Working with sample 3 ##>   Working with sample 4 ##>   Working with sample 5 ##>   Working with sample 6 ##> Calculating noise thresholds for 6 samples... ##>     similarity.threshold = 0.25 ##>     method.chosen = Boxplot-IQR ##> Denoising expression matrix... ##>     removing noisy genes ##>     adjusting matrix ##> >>> Done! <<< ##> Performing quantile normalisation... ##> Done!"},{"path":"/articles/bulkAnalyseR.html","id":"creating-a-shiny-app","dir":"Articles","previous_headings":"","what":"Creating a shiny app","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"example app Yang 2019 data can found . Readers encouraged try different features described live version app familiarise different features. central function bulkAnalyseR generateShinyApp. function creates app.R file required objects run app .rda format target directory. key inputs generateShinyApp expression.matrix (processed using preprocessExpressionMatrix) metadata. can also specify title app (appear navigation bar top app) app.title, modality (RNA default) displayed name main tab, directory app saved shiny.dir shiny theme wish use (‘flatly’ default, can find options ). also recommended specify organism data generated, firstly using organism parameter using gprofiler2 naming convention e.g. ‘hsapiens’,‘mmusculus’ (see full list organisms IDs), secondly specifying database annotations convert ENSEMBL IDs gene names e.g. org.Hs.eg.db - full list bioconductor packaged databases can seen using command: dataset example generated M. musculus generate app using function call (note org.Mm.eg.db needs installed): organism specified g:profiler enrichment tab automatically excluded. model organism database specified row names expression matrix used throughout. recommended use ENSEMBL ids row names supply model organism org.db parameter organism among ones provided, ensure compatibility. create folder called shiny_Yang2019 2 data files expression_matrix.rda metadata.rda app.R defines app. see app, can call shiny::runApp(‘shiny_Yang2019’) app start. app generated standalone can shared collaborators published online platform like . provides easy way anyone explore data verify conclusions, increasing access promoting reproducibility bioinformatics analysis. default, app 10 panels: Home, Sample select, Quality checks, Differential expression, Volcano MA plots, DE summary, Enrichment, Expression patterns, Cross plot, GRN inference. can choose remove one panels using panels.default parameter. app contains multiple modalities, different datasets, different subsets dataset can also generated. modality, expression.matrix, metadata, organism, org.db, panels.default parameters vectorised accept multiple arguments (vector list original argument complex). Note parameters must length (length 1) avoid errors. example creating app two different versions original app created presented : See following sections details default panels. panel, can also find example code generate similar results plots ones displayed panel without using app.","code":"BiocManager::available(\"^org\\\\.\") generateShinyApp(   shiny.dir = \"shiny_Yang2019\",   app.title = \"Shiny app for visualisation of three timepoints from the Yang 2019 data\",   modality = \"RNA\",   expression.matrix = exp.proc,   metadata = meta,   organism = \"mmusculus\",   org.db = \"org.Mm.eg.db\" ) generateShinyApp(   shiny.dir = \"shiny_Yang2019_onlyQC_DE\",   app.title = \"Shiny app for visualisation of three timepoints from the Yang 2019 data\",   modality = \"RNA\",   expression.matrix = exp.proc,   metadata = meta,   organism = \"mmusculus\",   org.db = \"org.Mm.eg.db\",   panels.default = c('QC','DE') ) generateShinyApp(   shiny.dir = \"shiny_Yang2019_two_modalities\",   app.title = \"Shiny app for visualisation of three timepoints from the Yang 2019 data\",   modality = c(\"RNA 1\", \"RNA 2\"),   expression.matrix = exp.proc,   metadata = meta,   organism = \"mmusculus\",   org.db = \"org.Mm.eg.db\",   panels.default = list(     c(\"Landing\", \"SampleSelect\", \"QC\", \"DE\", \"DEplot\", \"DEsummary\",        \"Enrichment\", \"Patterns\", \"Cross\", \"GRN\"),     c('QC','DE')   ) )"},{"path":"/articles/bulkAnalyseR.html","id":"home","dir":"Articles","previous_headings":"Creating a shiny app","what":"Home","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"tab contains useful links (including vignette!) get started bulkAnalyseR.","code":""},{"path":"/articles/bulkAnalyseR.html","id":"sample-select","dir":"Articles","previous_headings":"Creating a shiny app","what":"Sample Select","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"tab allows select subset samples use analysis. particular allows exclude low quality samples (discover using QC tab) focus particular parts data. selected samples want, make sure press ‘Use selected sample!’ button confirm choice. use button select samples samples used.","code":""},{"path":"/articles/bulkAnalyseR.html","id":"quality-check-qc","dir":"Articles","previous_headings":"Creating a shiny app","what":"Quality check (QC)","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"Quality Check (QC) tab includes Jaccard Similarity Index (JSI) heatmap, PCA dimensionality reduction, groups based metadata information. enables high-level overview similarity across samples, usually reflecting experimental design quite closely serving sanity check. Within panel, also option show MA plot 2 columns - can used investigate sample similarity differences found JSI PCA plots.","code":""},{"path":"/articles/bulkAnalyseR.html","id":"jaccard-similarity-index","dir":"Articles","previous_headings":"Creating a shiny app > Quality check (QC)","what":"Jaccard Similarity Index","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"Within JSI plot, can change order samples using ordering metadata columns well specifying number top abundance genes used calculate JSI. Finally, can choose whether JSI values shown heatmap.","code":"jaccard_heatmap(   expression.matrix = exp.proc,   metadata = meta,   top.annotation.ids = 2,   n.abundant = 500,    show.values = FALSE,   show.row.column.names = (nrow(meta) <= 20) )"},{"path":"/articles/bulkAnalyseR.html","id":"pca","dir":"Articles","previous_headings":"Creating a shiny app > Quality check (QC)","what":"PCA","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"PCA plot can created chosen number top abundance genes coloured metadata attribute selected. sample labels ellipses around groups can also included removed.","code":"plot_pca(   expression.matrix = exp.proc,   metadata = meta,   annotation.id = 2,   n.abundant = 500,   show.labels = TRUE,   show.ellipses = TRUE )"},{"path":"/articles/bulkAnalyseR.html","id":"ma-plots","dir":"Articles","previous_headings":"Creating a shiny app > Quality check (QC)","what":"MA plots","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"third part QC tab allows create MA plots comparing two samples. , example, use plots compare replicates - expected show close funneling shape.","code":""},{"path":"/articles/bulkAnalyseR.html","id":"differential-expression-de","dir":"Articles","previous_headings":"Creating a shiny app","what":"Differential expression (DE)","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"differential expression (DE) tab can used compare conditions columns metadata table using edgeR DESeq2 packages customisable parameters (log2 fold change adjusted p-value threshold). output list differentially expressed genes along log2 fold changes adjusted p-values. Within app, differentially expressed genes can explored using interactive table (sorted absolute log2 fold change) can also saved comma-separated file.  tab, can also select genes interest clicking table, can used DE summary Volcano/MA tabs. also button choose top 50 DE genes (absolute log2 fold change) reset selection.","code":"# first create annotation table anno <- AnnotationDbi::select(   org.Mm.eg.db::org.Mm.eg.db,   keys = rownames(exp.proc),   keytype = 'ENSEMBL',   columns = 'SYMBOL' ) %>%   distinct(ENSEMBL, .keep_all = TRUE) %>%   mutate(NAME = ifelse(is.na(SYMBOL), ENSEMBL, SYMBOL))  DEtable <- DEanalysis_edger(   expression.matrix = exp.proc[, 1:4],   condition = meta$timepoint[1:4],   var1 = \"0h\",   var2 = \"12h\",   anno = anno ) DEtable_deseq <- DEanalysis_deseq2(   expression.matrix = exp.proc[, 1:4],   condition = meta$timepoint[1:4],   var1 = \"0h\",   var2 = \"12h\",   anno = anno )"},{"path":"/articles/bulkAnalyseR.html","id":"volcanoma-plots","dir":"Articles","previous_headings":"Creating a shiny app","what":"Volcano/MA plots","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"Assuming differential expression performed, Volcano/MA panel visualises DE genes, allowing interactive exploration data searching specific genes interest using selected top DE genes clicking genes plot gain information generate hypotheses.","code":""},{"path":"/articles/bulkAnalyseR.html","id":"volcano-plots","dir":"Articles","previous_headings":"Creating a shiny app > Volcano/MA plots","what":"Volcano plots","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"Volcano plots show log2 fold change log10 BH-adjusted p-value. DE points shown blue colour proportional log2 expression gene. Green blue guide lines show DE thresholds twice DE thresholds respectively.","code":"volcano_plot(   genes.de.results = DEtable,   pval.threshold = 0.05,    lfc.threshold = 1,   log10pval.cap = TRUE )"},{"path":"/articles/bulkAnalyseR.html","id":"ma-plots-1","dir":"Articles","previous_headings":"Creating a shiny app > Volcano/MA plots","what":"MA plots","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"DE MA plots show log2 expression levels log2 fold change gene. DE points shown blue colour proportional log2 expression gene. Green blue guide lines show DE thresholds twice DE thresholds respectively.","code":"ma_plot(   genes.de.results = DEtable,   pval.threshold = 0.05,    lfc.threshold = 1 )"},{"path":"/articles/bulkAnalyseR.html","id":"de-summary","dir":"Articles","previous_headings":"Creating a shiny app","what":"DE summary","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"DE summary panel allows visualisation using genes called DE selected user DE panel.","code":""},{"path":"/articles/bulkAnalyseR.html","id":"expression-heatmap","dir":"Articles","previous_headings":"Creating a shiny app > DE summary","what":"Expression heatmap","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"Secondly, can create heatmaps expression levels (raw expression level, log2 expression level Z-score) selected genes. default top 50 DE genes used, users select genes DE panel used instead. Also, genes can added name Additional genes box. JSI, can change order samples using ordering metadata columns.","code":"genes_heatmap <- filter(arrange(DEtable, desc(abs(log2FC))), pvalAdj < 0.05)$gene_id expression_heatmap(   expression.matrix.subset = exp.proc[genes_heatmap, ],   top.annotation.ids = 2,   metadata = meta,   type = \"Z-score\",   show.column.names = (nrow(meta) <= 20) )"},{"path":"/articles/bulkAnalyseR.html","id":"post-differential-expression-pca","dir":"Articles","previous_headings":"Creating a shiny app > DE summary","what":"Post-differential expression PCA","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"Firstly, can create PCA using DE genes using selected genes DE panel. can also create PCA user-selected DE genes deselecting ‘Use DE?’ option. QC PCA plot, can colour points chosen metadata columns add/remove sample labels group ellipses.","code":"genes_de <- filter(DEtable, pvalAdj < 0.05, abs(log2FC) > 1)$gene_id plot_pca(   expression.matrix = exp.proc[genes_de, ],   metadata = meta,   annotation.id = 2,   n.abundant = NULL,   show.labels = TRUE,   show.ellipses = TRUE )"},{"path":"/articles/bulkAnalyseR.html","id":"enrichment","dir":"Articles","previous_headings":"Creating a shiny app","what":"Enrichment","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"enrichment tab uses differentially expressed genes run enrichment analysis using g:profiler user selected output standard GO terms, KEGG reactome pathway databases, miRNA transcription factor lists. plot shows log10 BH-corrected p-value term, separated category. background set used genes expression matrix - noisyR preprocessing used genes s/n threshold. output results table g:profiler can downloaded well jitter plot can clicked identify significant terms.","code":"gostres <- gprofiler2::gost(   query = genes_de,   organism = \"mmusculus\",   correction_method = 'fdr',   custom_bg = DEtable$gene_id,   evcodes = TRUE ) gostres$result <-  mutate(   gostres$result,   parents = sapply(.data$parents, toString),   intersection_names = sapply(.data$intersection, function(x){     ensids <- strsplit(x, split = \",\")[[1]]     names <- DEtable$gene_name[match(ensids, DEtable$gene_id)]     paste(names, collapse = \",\")   }) )"},{"path":"/articles/bulkAnalyseR.html","id":"expression-patterns","dir":"Articles","previous_headings":"Creating a shiny app","what":"Expression patterns","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"expression pattern tab allows creation expression patterns identify potential genes interest across variety conditions. common application time series, suitable another logical progression conditions. define series, user must select column metadata drag states “Series states use” area. pattern identification done calculating confidence interval gene condition, using samples condition number standard deviations away mean provided. pattern two consecutive conditions defined straight (S) intervals overlap (U) (D) don’t. full expression pattern concatenation individual patterns (example, “UUS” 4 conditions). grouped expression matrix can downloaded, showing pattern gene assigned . Plots also created genes selected pattern (“Pattern plot”).","code":"condition <- factor(meta$timepoint) tbl <- calculate_condition_mean_sd_per_gene(exp.proc, condition) patterns <- make_pattern_matrix(tbl, n_sd = 2)[, \"pattern\"]"},{"path":"/articles/bulkAnalyseR.html","id":"pattern-line-plot","dir":"Articles","previous_headings":"Creating a shiny app > Expression patterns","what":"Pattern line plot","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"line plot shown mean expression genes assigned chosen pattern condition. expression values mean-scaled default. legend shown less 10 genes present.","code":""},{"path":"/articles/bulkAnalyseR.html","id":"pattern-expression-heatmap","dir":"Articles","previous_headings":"Creating a shiny app > Expression patterns","what":"Pattern expression heatmap","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"heatmap shown mean expression genes assigned chosen pattern condition. expression values z-score transformed default. Gene names shown less 50 genes present.","code":""},{"path":"/articles/bulkAnalyseR.html","id":"cross-plots","dir":"Articles","previous_headings":"Creating a shiny app","what":"Cross plots","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"cross plot tab allows compare two differential expression analyses , example two comparisons interest comparison using edgeR DESeq2. plot shows log2 fold change two differential expression calls axis. Genes DE comparisons coloured purple, comparison 1 comparison 2 blue comparison 2 comparison 1 red. can label selected genes click genes plot gain information generate hypotheses.","code":"cross_plot(   DEtable1 = DEtable,   DEtable2 = DEtable_deseq,   DEtable1Subset = filter(DEtable, pvalAdj < 0.05, abs(log2FC) > 1),   DEtable2Subset = filter(DEtable_deseq, pvalAdj < 0.05, abs(log2FC) > 1),   lfc.threshold = 1 )"},{"path":"/articles/bulkAnalyseR.html","id":"gene-regulatory-networks-grn","dir":"Articles","previous_headings":"Creating a shiny app","what":"Gene regulatory networks (GRN)","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"bulkAnalyseR enables creation small gene regulatory networks (GRNs) facilitate exploration hypothesis generation based genes interest. Target genes can selected small network targets can generated clicking “Start GRN inference” button. Within bulkAnalyseR app, 2 separate tabs inferred GRNs can calculated examined. Firstly, GRN inference, four different GRNs can inferred , investigate differences experimental conditions. one GRN generated, regulators common coloured differently UpSet plot shown, summarising commonalities edges networks. Secondly, DE & enrichment GRN tab, GRN can inferred using differentially expressed genes (using comparison selected DE tab) additional information relating genes transcription factors /miRNAs using results enrichment tab can appended resulting network. cases, number regulators can adjusted network plots downloaded interactive html format. Note target genes can also regulate selected genes functionally similar.","code":"infer_GRN(   expression.matrix = exp.proc,    metadata = meta,    anno = anno,   seed = 13,   targets = \"Trpm1\",    condition = \"timepoint\",    samples = c(\"0h\", \"12h\"),    inference_method = \"GENIE3\" )"},{"path":"/articles/bulkAnalyseR.html","id":"adding-extra-panels","dir":"Articles","previous_headings":"Creating a shiny app","what":"Adding extra panels","title":"bulkAnalyseR: An accessible, interactive pipeline for analysing and sharing bulk sequencing results","text":"Alongside default panels, can also define panels add app. example, add extra QC panel (case exactly ). Note extra panels appear top level, parameters converted lists generateShinyApp thus need supplied . might useful explore app.R file generated command understand structure: need add extra data package imports extra panel(s) can using data.extra packages.extra parameters. Make sure extra data loaded create app. Note data.exta object available app single list. example:","code":"generateShinyApp(   shiny.dir = \"shiny_Yang2019_ExtraQC\",   app.title = \"Shiny app for visualisation of three timepoints from the Yang 2019 data - extra QC\",   modality = \"RNA\",   expression.matrix = exp.proc,   metadata = meta,   organism = \"mmusculus\",   org.db = \"org.Mm.eg.db\",   panels.extra = tibble::tibble(     name = \"RNA2\",     UIfun = \"modalityPanelUI\",      UIvars = \"'RNA2', metadata[[1]], NA, 'QC'\",      serverFun = \"modalityPanelServer\",      serverVars = \"'RNA2', expression.matrix[[1]], metadata[[1]], anno[[1]], NA, 'QC'\"   ) ) extra.data1 = matrix(rnorm(36),nrow=6) extra.data2 = matrix(rnorm(60),nrow=10)  generateShinyApp(   shiny.dir = \"shiny_Yang2019_ExtraQC\",   app.title = \"Shiny app for visualisation of three timepoints from the Yang 2019 data - extra QC\",   modality = \"RNA\",   expression.matrix = exp.proc,   metadata = meta,   organism = \"mmusculus\",   org.db = \"org.Mm.eg.db\",   panels.extra = tibble::tibble(     name = \"RNA2\",     UIfun = \"modalityPanelUI\",      UIvars = \"'RNA2', metadata[[1]], NA, 'QC'\",      serverFun = \"modalityPanelServer\",      serverVars = \"'RNA2', expression.matrix[[1]], metadata[[1]], anno[[1]], NA, 'QC'\"   ),   data.extra = list(extra.data1, extra.data2),   packages.extra = \"somePackage\", ) sessionInfo() ##> R version 4.1.1 (2021-08-10) ##> Platform: x86_64-w64-mingw32/x64 (64-bit) ##> Running under: Windows 10 x64 (build 22000) ##>  ##> Matrix products: default ##>  ##> locale: ##> [1] LC_COLLATE=English_United Kingdom.1252  ##> [2] LC_CTYPE=English_United Kingdom.1252    ##> [3] LC_MONETARY=English_United Kingdom.1252 ##> [4] LC_NUMERIC=C                            ##> [5] LC_TIME=English_United Kingdom.1252     ##>  ##> attached base packages: ##> [1] stats     graphics  grDevices utils     datasets  methods   base      ##>  ##> other attached packages: ##> [1] ggplot2_3.3.5      dplyr_1.0.8        bulkAnalyseR_1.0.0 ##>  ##> loaded via a namespace (and not attached): ##>  [1] Rcpp_1.0.8.3          lattice_0.20-44       assertthat_0.2.1      ##>  [4] rprojroot_2.0.3       digest_0.6.29         foreach_1.5.2         ##>  [7] utf8_1.2.2            mime_0.12             R6_2.5.1              ##> [10] evaluate_0.16         highr_0.9             pillar_1.8.1          ##> [13] rlang_1.0.6           rstudioapi_0.14       jquerylib_0.1.4       ##> [16] Matrix_1.5-1          preprocessCore_1.54.0 rmarkdown_2.16        ##> [19] pkgdown_2.0.6         labeling_0.4.2        textshaping_0.3.6     ##> [22] desc_1.4.2            splines_4.1.1         stringr_1.4.1         ##> [25] munsell_0.5.0         philentropy_0.6.0     shiny_1.7.1           ##> [28] compiler_4.1.1        httpuv_1.6.3          xfun_0.29             ##> [31] pkgconfig_2.0.3       systemfonts_1.0.4     mgcv_1.8-36           ##> [34] htmltools_0.5.2       tidyselect_1.1.2      tibble_3.1.6          ##> [37] codetools_0.2-18      fansi_1.0.2           withr_2.5.0           ##> [40] later_1.3.0           noisyr_1.0.0          grid_4.1.1            ##> [43] nlme_3.1-152          jsonlite_1.8.0        xtable_1.8-4          ##> [46] gtable_0.3.1          lifecycle_1.0.2       DBI_1.1.3             ##> [49] magrittr_2.0.2        scales_1.2.1          cli_3.4.1             ##> [52] stringi_1.7.6         cachem_1.0.6          farver_2.1.0          ##> [55] fs_1.5.2              promises_1.2.0.1      bslib_0.4.0           ##> [58] ellipsis_0.3.2        ragg_1.2.2            generics_0.1.3        ##> [61] vctrs_0.3.8           iterators_1.0.14      tools_4.1.1           ##> [64] glue_1.6.2            purrr_0.3.4           fastmap_1.1.0         ##> [67] yaml_2.3.5            colorspace_2.0-3      memoise_2.0.1         ##> [70] knitr_1.40            sass_0.4.1"},{"path":"/articles/GEO_App.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"A beginner's guide to creating a bulkAnalyseR app from a GEO dataset","text":"First, install latest version bulkAnalyseR, starting CRAN Bioconductor dependencies:","code":"packages.cran <- c(   \"ggplot2\", \"shiny\", \"shinythemes\", \"gprofiler2\", \"stats\", \"ggrepel\",   \"utils\", \"RColorBrewer\", \"circlize\", \"shinyWidgets\", \"shinyjqui\",   \"dplyr\", \"magrittr\", \"ggforce\", \"rlang\", \"glue\", \"matrixStats\",   \"noisyr\", \"tibble\", \"ggnewscale\", \"ggrastr\", \"visNetwork\", \"shinyLP\",   \"grid\", \"DT\", \"scales\", \"shinyjs\", \"tidyr\", \"UpSetR\", \"ggVennDiagram\" ) new.packages.cran <- packages.cran[!(packages.cran %in% installed.packages()[, \"Package\"])] if(length(new.packages.cran))   install.packages(new.packages.cran)  packages.bioc <- c(   \"edgeR\", \"DESeq2\", \"preprocessCore\", \"GENIE3\", \"ComplexHeatmap\" ) new.packages.bioc <- packages.bioc[!(packages.bioc %in% installed.packages()[,\"Package\"])] if(length(new.packages.bioc)){   if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")   BiocManager::install(new.packages.bioc) }  install.packages(\"bulkAnalyseR\")"},{"path":[]},{"path":"/articles/GEO_App.html","id":"get-the-expression-matrix","dir":"Articles","previous_headings":"Download data and create app","what":"Get the expression matrix","title":"A beginner's guide to creating a bulkAnalyseR app from a GEO dataset","text":"start downloading reading expression matrix. Rows represent genes/features columns represent samples (note need internet connection run code ). matrix 2022 study Stem Cell transcriptional response Microglia-Conditioned Media. use samples study illustrative purposes.","code":"download_path <- paste0(tempdir(), \"expression_matrix.csv.gz\") download.file(   \"https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE178620&format=file&file=GSE178620%5Fraw%5Fabundances%2Ecsv%2Egz\",    download_path ) exp <- as.matrix(read.csv(download_path, row.names = 1))[, c(1,2,19,20)] head(exp) ##>                 control_G322_G322_1 control_G322_G322_2 microglia_067MG_G322_1 ##> ENSG00000223972                   0                   0                      0 ##> ENSG00000227232                  51                  45                     25 ##> ENSG00000278267                   6                   0                      0 ##> ENSG00000243485                   0                   0                      0 ##> ENSG00000284332                   0                   0                      0 ##> ENSG00000237613                   0                   0                      0 ##>                 microglia_067MG_G322_2 ##> ENSG00000223972                      0 ##> ENSG00000227232                     40 ##> ENSG00000278267                      0 ##> ENSG00000243485                      0 ##> ENSG00000284332                      0 ##> ENSG00000237613                      0"},{"path":"/articles/GEO_App.html","id":"defining-metadata","dir":"Articles","previous_headings":"Download data and create app","what":"Defining metadata","title":"A beginner's guide to creating a bulkAnalyseR app from a GEO dataset","text":"use simple metadata table just main condition experiment. Detailed metadata available GEO datasets can downloaded used instead.","code":"meta <- data.frame(   name = colnames(exp),   condition = sapply(colnames(exp), USE.NAMES = FALSE, function(nm){     strsplit(nm, \"_\")[[1]][1]   }) ) meta ##>                     name condition ##> 1    control_G322_G322_1   control ##> 2    control_G322_G322_2   control ##> 3 microglia_067MG_G322_1 microglia ##> 4 microglia_067MG_G322_2 microglia"},{"path":"/articles/GEO_App.html","id":"pre-processing","dir":"Articles","previous_headings":"Download data and create app","what":"Pre-processing","title":"A beginner's guide to creating a bulkAnalyseR app from a GEO dataset","text":"can now denoise normalise data using bulkAnalyseR","code":"exp.proc <- bulkAnalyseR::preprocessExpressionMatrix(exp, output.plot = TRUE) ##> >>> noisyR counts approach pipeline <<< ##> The input matrix has 60671 rows and 4 cols ##>     number of genes: 60671 ##>     number of samples: 4 ##> Calculating the number of elements per window ##>     the number of elements per window is 6067 ##>     the step size is 303 ##>     the selected similarity metric is correlation_pearson ##>   Working with sample 1 ##>   Working with sample 2 ##>   Working with sample 3 ##>   Working with sample 4 ##> Calculating noise thresholds for 4 samples... ##>     similarity.threshold = 0.25 ##>     method.chosen = Boxplot-IQR ##> Denoising expression matrix... ##>     removing noisy genes ##>     adjusting matrix ##> >>> Done! <<< ##> Performing quantile normalisation... ##> Done!"},{"path":"/articles/GEO_App.html","id":"creating-the-shiny-app","dir":"Articles","previous_headings":"Download data and create app","what":"Creating the shiny app","title":"A beginner's guide to creating a bulkAnalyseR app from a GEO dataset","text":"Finally, can create shiny app. example app can found .","code":"bulkAnalyseR::generateShinyApp(   shiny.dir = \"shiny_GEO\",   app.title = \"Shiny app for visualisation of GEO data\",   modality = \"RNA\",   expression.matrix = exp.proc,   metadata = meta,   organism = \"hsapiens\",   org.db = \"org.Hs.eg.db\" ) sessionInfo() ##> R version 4.1.1 (2021-08-10) ##> Platform: x86_64-w64-mingw32/x64 (64-bit) ##> Running under: Windows 10 x64 (build 22000) ##>  ##> Matrix products: default ##>  ##> locale: ##> [1] LC_COLLATE=English_United Kingdom.1252  ##> [2] LC_CTYPE=English_United Kingdom.1252    ##> [3] LC_MONETARY=English_United Kingdom.1252 ##> [4] LC_NUMERIC=C                            ##> [5] LC_TIME=English_United Kingdom.1252     ##>  ##> attached base packages: ##> [1] stats     graphics  grDevices utils     datasets  methods   base      ##>  ##> loaded via a namespace (and not attached): ##>  [1] Rcpp_1.0.8.3          lattice_0.20-44       assertthat_0.2.1      ##>  [4] rprojroot_2.0.3       digest_0.6.29         foreach_1.5.2         ##>  [7] utf8_1.2.2            mime_0.12             R6_2.5.1              ##> [10] evaluate_0.16         highr_0.9             ggplot2_3.3.5         ##> [13] pillar_1.8.1          rlang_1.0.6           rstudioapi_0.14       ##> [16] jquerylib_0.1.4       Matrix_1.5-1          preprocessCore_1.54.0 ##> [19] rmarkdown_2.16        pkgdown_2.0.6         textshaping_0.3.6     ##> [22] desc_1.4.2            labeling_0.4.2        splines_4.1.1         ##> [25] stringr_1.4.1         munsell_0.5.0         philentropy_0.6.0     ##> [28] shiny_1.7.1           compiler_4.1.1        httpuv_1.6.3          ##> [31] xfun_0.29             pkgconfig_2.0.3       systemfonts_1.0.4     ##> [34] mgcv_1.8-36           htmltools_0.5.2       tidyselect_1.1.2      ##> [37] tibble_3.1.6          codetools_0.2-18      fansi_1.0.2           ##> [40] dplyr_1.0.8           later_1.3.0           noisyr_1.0.0          ##> [43] grid_4.1.1            nlme_3.1-152          jsonlite_1.8.0        ##> [46] xtable_1.8-4          gtable_0.3.1          lifecycle_1.0.2       ##> [49] DBI_1.1.3             magrittr_2.0.2        scales_1.2.1          ##> [52] cli_3.4.1             stringi_1.7.6         cachem_1.0.6          ##> [55] farver_2.1.0          fs_1.5.2              promises_1.2.0.1      ##> [58] bslib_0.4.0           ellipsis_0.3.2        ragg_1.2.2            ##> [61] generics_0.1.3        vctrs_0.3.8           iterators_1.0.14      ##> [64] tools_4.1.1           glue_1.6.2            bulkAnalyseR_1.0.0    ##> [67] purrr_0.3.4           fastmap_1.1.0         yaml_2.3.5            ##> [70] colorspace_2.0-3      memoise_2.0.1         knitr_1.40            ##> [73] sass_0.4.1"},{"path":"/articles/IntegratingMultiomics.html","id":"cis-regulatory-integration","dir":"Articles","previous_headings":"","what":"Cis-regulatory integration","title":"bulkAnalyseR: Integrating multi-omics or external data","text":"bulkAnalyseR enables integration information involving cis-regulatory elements. reference expression matrix chosen, may may central expression matrix one full modality panels. GRN created expression matrix (see information GRN inference). Elements GRN compared elements second table located proximity (e.g. 1kb, user-defined parameter); elements proximity used augment focal GRN. example, consider subset mRNAseq h3k4me3 ChIPseq data experiment included 2019 paper Yang et al. preprocessed mRNAseq data included bulkAnalyseR package can loaded running: define default full modality app RNAseq data additional column relating cis-integration also need define metadata table RNAseq data (reference expression matrix): reference inputs RNAseq data following structure: identify elements proximity genes dataset, also need table chromosome, start stop coordinates genes. data needed integration step can found . RNAseq, table can produced reference gtf. also need supply organism database, “org.Mm.eg.db” (see information). Finally, need information ChIPseq peak coordinates compare RNAseq gene coordinates. can come, example, MACS2 peak calling output (narrowPeak files). two coordinate tables always structure chromosome names must match tables. create integration tab, need define following tibble: Note table, names tables enclosed quotation marks. create app , use call generateShinyApp add cis.integration argument tibble. cis-integration tab look like :  instead create app two modality tabs, including ChIPseq expression matrix cis integration mRNAseq ChIPseq reference expression matrix like follows: example app cis-integration can found .","code":"exp.yang <- read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),   row.names = 1) %>% as.matrix head(exp.yang) ##>                    SRR7624365  SRR7624366  SRR7624371  SRR7624372  SRR7624375 ##> ENSMUSG00000025902   116.8333    95.33333    51.83333    69.83333    55.50000 ##> ENSMUSG00000098104   101.6667    89.91667    85.00000    87.16667    81.16667 ##> ENSMUSG00000103922   283.3333   277.83333   342.00000   410.50000   333.00000 ##> ENSMUSG00000033845 11528.1667 10208.00000 14889.33333 15431.66667 14718.33333 ##> ENSMUSG00000102275   136.5000   119.50000   165.66667   156.00000   173.00000 ##> ENSMUSG00000025903  3870.8333  3391.50000  4770.83333  5288.83333  4151.50000 ##>                     SRR7624376 ##> ENSMUSG00000025902    64.83333 ##> ENSMUSG00000098104    74.83333 ##> ENSMUSG00000103922   296.50000 ##> ENSMUSG00000033845 13848.16667 ##> ENSMUSG00000102275   183.00000 ##> ENSMUSG00000025903  3671.33333 meta <- data.frame(   srr = colnames(exp.yang),    timepoint = rep(c(\"0h\", \"12h\", \"36h\"), each = 2) ) str(exp.yang) ##>  num [1:19163, 1:6] 117 102 283 11528 136 ... ##>  - attr(*, \"dimnames\")=List of 2 ##>   ..$ : chr [1:19163] \"ENSMUSG00000025902\" \"ENSMUSG00000098104\" \"ENSMUSG00000103922\" \"ENSMUSG00000033845\" ... ##>   ..$ : chr [1:6] \"SRR7624365\" \"SRR7624366\" \"SRR7624371\" \"SRR7624372\" ... str(meta) ##> 'data.frame':   6 obs. of  2 variables: ##>  $ srr      : chr  \"SRR7624365\" \"SRR7624366\" \"SRR7624371\" \"SRR7624372\" ... ##>  $ timepoint: chr  \"0h\" \"0h\" \"12h\" \"12h\" ... gene.coord.table <- read.csv(   url('https://raw.githubusercontent.com/Core-Bioinformatics/bulkAnalyseR/master/exampledata/Yang2019_ChIP/gene_coords_GRCm38.p6.csv'),   row.names = 1) str(gene.coord.table) ##> 'data.frame':   19163 obs. of  6 variables: ##>  $ ID    : chr  \"ENSMUSG00000025902\" \"ENSMUSG00000098104\" \"ENSMUSG00000103922\" \"ENSMUSG00000033845\" ... ##>  $ Chrom : chr  \"chr1\" \"chr1\" \"chr1\" \"chr1\" ... ##>  $ Start : int  4490931 4687934 4771131 4773206 4778063 4807788 4857814 4909576 4970857 5070018 ... ##>  $ Stop  : int  4497354 4689403 4772199 4785739 4779212 4848410 4897909 5070285 4976820 5162529 ... ##>  $ Strand: chr  \"-\" \"-\" \"+\" \"-\" ... ##>  $ Name  : chr  \"Sox17\" \"Gm6085\" \"Gm6123\" \"Mrpl15\" ... chip.coord.table <- read.csv(   url('https://raw.githubusercontent.com/Core-Bioinformatics/bulkAnalyseR/master/exampledata/Yang2019_ChIP/ChIP_peak_coords.csv'),   row.names = 1) str(chip.coord.table) ##> 'data.frame':   94023 obs. of  6 variables: ##>  $ ID    : chr  \"chr1:3020816-3021086\" \"chr1:3027145-3027567\" \"chr1:3037113-3037712\" \"chr1:3149858-3150088\" ... ##>  $ Chrom : chr  \"chr1\" \"chr1\" \"chr1\" \"chr1\" ... ##>  $ Start : int  3020816 3027145 3037113 3149858 3343863 3531507 3621959 3670554 3671137 3671661 ... ##>  $ Stop  : int  3021086 3027567 3037712 3150088 3344120 3532081 3622503 3671576 3671526 3672619 ... ##>  $ Strand: chr  \"+\" \"+\" \"+\" \"+\" ... ##>  $ Name  : chr  \"chr1:3020816-3021086\" \"chr1:3027145-3027567\" \"chr1:3037113-3037712\" \"chr1:3149858-3150088\" ... cis.integration <- tibble::tibble(   reference.expression.matrix = 'exp.yang',   reference.org.db = 'org.Mm.eg.db',   reference.coord = 'gene.coord.table',   comparison.coord = 'chip.coord.table',   reference.table.name = 'mRNAseq',   comparison.table.name = 'ChIPseq' ) generateShinyApp(   expression.matrix = exp.yang,   metadata = meta,   modality = \"RNA\",   shiny.dir = \"shiny_Yang2019_CisIntegration\",   app.title = \"Shiny app for visualisation of three timepoints from the Yang 2019 data\",   organism = \"mmusculus\",   org.db = \"org.Mm.eg.db\",   cis.integration = cis.integration ) shiny::runApp('shiny_Yang2019_CisIntegration') exp.chip <- read.csv(   url('https://raw.githubusercontent.com/Core-Bioinformatics/bulkAnalyseR/master/exampledata/Yang2019_ChIP/ChIP_expression_matrix_preprocessed.csv'),   row.names = 1) %>% as.matrix meta.chip = data.frame(   id = colnames(exp.chip),   timepoint = c('0h','12h','36h') ) cis.integration.2 <- tibble::tibble(   reference.expression.matrix = c('exp.yang','exp.chip'),   reference.org.db = c('org.Mm.eg.db','NULL'),   reference.coord = c('gene.coord.table','chip.coord.table'),   comparison.coord = c('chip.coord.table','gene.coord.table'),   reference.table.name = c('mRNAseq','ChIPseq'),   comparison.table.name = c('ChIPseq','mRNAseq') ) generateShinyApp(   expression.matrix = list(exp.yang,exp.chip),   metadata = list(meta,meta.chip),   modality = c('RNA','ChIP'),   shiny.dir = \"shiny_Yang2019_CisIntegration2\",   app.title = \"Shiny app for visualisation of three timepoints from the Yang 2019 data\",   organism = list(\"mmusculus\",NA),   org.db = list(\"org.Mm.eg.db\",NA),   cis.integration = cis.integration.2 ) shiny::runApp('shiny_Yang2019_CisIntegration2')"},{"path":"/articles/IntegratingMultiomics.html","id":"trans-regulatory-elements","dir":"Articles","previous_headings":"","what":"Trans-regulatory elements","title":"bulkAnalyseR: Integrating multi-omics or external data","text":"bulkAnalyseR also offers opportunity analyse multiple elements related necessarily proximity correlation. component, two expression matrices required, columns. joint GRN calculated combined expression matrices targets can chosen either table. show functionality, focus mRNA miRNA data 2021 paper Li et al. data needed example can found . trans integration tab Li 2021 data look like:  example app trans-integration can found .","code":"exp.mirna <- read.csv(   url('https://raw.githubusercontent.com/Core-Bioinformatics/bulkAnalyseR/master/exampledata/Li2021_miRNA_mRNA/expression_matrix_miRNA_preprocessed.csv'),   row.names = 1) %>% as.matrix str(exp.mirna) ##>  num [1:555, 1:6] 222 472 239290 462 88611 ... ##>  - attr(*, \"dimnames\")=List of 2 ##>   ..$ : chr [1:555] \"hsa-let-7a-2-3p \" \"hsa-let-7a-3p \" \"hsa-let-7a-5p \" \"hsa-let-7b-3p \" ... ##>   ..$ : chr [1:6] \"control_1\" \"control_2\" \"control_3\" \"IDD_1\" ... exp.mrna <- read.csv(   url('https://raw.githubusercontent.com/Core-Bioinformatics/bulkAnalyseR/master/exampledata/Li2021_miRNA_mRNA/expression_matrix_mRNA_preprocessed.csv'),   row.names = 1) %>% as.matrix str(exp.mrna) ##>  num [1:20609, 1:6] 132.7 78.3 123.8 89 153.7 ... ##>  - attr(*, \"dimnames\")=List of 2 ##>   ..$ : chr [1:20609] \"ENSG00000227232\" \"ENSG00000241860\" \"ENSG00000279457\" \"ENSG00000237094\" ... ##>   ..$ : chr [1:6] \"control_1\" \"control_2\" \"control_3\" \"IDD_1\" ... meta.trans = data.frame(id = paste0(rep(c('control_','IDD_'),each = 3),1:3),                         rep = rep(1:3,2),                         type = rep(c('control','IDD'),each = 3)) meta.trans ##>          id rep    type ##> 1 control_1   1 control ##> 2 control_2   2 control ##> 3 control_3   3 control ##> 4     IDD_1   1     IDD ##> 5     IDD_2   2     IDD ##> 6     IDD_3   3     IDD generateShinyApp(   shiny.dir = 'shiny_Li_2021',   app.title = 'Li 2021 Trans Regulatory Example',   modality=list('mRNA','miRNA'),   metadata = meta.trans,   expression.matrix = list(exp.mrna,exp.mirna),   org.db = list('org.Hs.eg.db',NA),   organism=list('hsapiens',NA),   trans.integration = tibble::tibble(     reference.expression.matrix='exp.mrna',     reference.org.db='org.Hs.eg.db',     comparison.expression.matrix='exp.mirna',     comparison.org.db='NULL',     reference.table.name='mRNA',     comparison.table.name='miRNA'   ) ) shiny::runApp('shiny_Li_2021')"},{"path":"/articles/IntegratingMultiomics.html","id":"custom-integration","dir":"Articles","previous_headings":"","what":"Custom integration","title":"bulkAnalyseR: Integrating multi-omics or external data","text":"bulkAnalyseR offers option include custom integration relating reference expression matrix. include known miRNA-mRNA target interations known transcription factors. integration miRNA-mRNA target interaction information, can use following function create custom comparison table: view available filtering options Support Type Experiments (validation type), run function extra print arguments: comparison table supplied custom integration 5 columns. Reference_ID Reference_Name match reference expression matrix. final Category column allows selection specific category integration information. define full app, use typical Yang 2019 call generateShinyApp add custom.integration parameter. custom integration panel Yang 2019 data, combined miRTarBase information looks like:  example app custom integration can found .","code":"mirtarbase.comparison.table <- preprocess_miRTarBase(organism.code = 'mmu', org.db = 'org.Mm.eg.db') mirtarbase.comparison.table <- preprocess_miRTarBase(   organism.code = 'mmu',   org.db = 'org.Mm.eg.db',   print.support.types = TRUE,    print.validation.methods = TRUE ) custom.integration <- tibble::tibble(   reference.expression.matrix = 'exp.yang',   reference.org.db = 'org.Mm.eg.db',   comparison.table = 'mirtarbase.comparison.table',   reference.table.name = 'RNA',   comparison.table.name = 'miRTarBase' ) generateShinyApp(   expression.matrix = exp.yang,   metadata = meta,   modality = \"RNA\",   shiny.dir = \"shiny_Yang2019_CustomIntegration\",   app.title = \"Shiny app for visualisation of three timepoints from the Yang 2019 data\",   organism = \"mmusculus\",   org.db = \"org.Mm.eg.db\",   custom.integration = custom.integration ) shiny::runApp('shiny_Yang2019_CustomIntegration')"},{"path":"/articles/IntegratingMultiomics.html","id":"integrating-enrichment-information","dir":"Articles","previous_headings":"","what":"Integrating enrichment information","title":"bulkAnalyseR: Integrating multi-omics or external data","text":"bulkAnalyseR also facilitates integration miRNA transcription factor information DE & enrichment GRN tab:","code":"sessionInfo() ##> R version 4.1.1 (2021-08-10) ##> Platform: x86_64-w64-mingw32/x64 (64-bit) ##> Running under: Windows 10 x64 (build 22000) ##>  ##> Matrix products: default ##>  ##> locale: ##> [1] LC_COLLATE=English_United Kingdom.1252  ##> [2] LC_CTYPE=English_United Kingdom.1252    ##> [3] LC_MONETARY=English_United Kingdom.1252 ##> [4] LC_NUMERIC=C                            ##> [5] LC_TIME=English_United Kingdom.1252     ##>  ##> attached base packages: ##> [1] stats     graphics  grDevices utils     datasets  methods   base      ##>  ##> other attached packages: ##> [1] bulkAnalyseR_1.0.0 ##>  ##> loaded via a namespace (and not attached): ##>  [1] tidyselect_1.1.2  xfun_0.29         bslib_0.4.0       purrr_0.3.4       ##>  [5] colorspace_2.0-3  vctrs_0.3.8       generics_0.1.3    htmltools_0.5.2   ##>  [9] yaml_2.3.5        utf8_1.2.2        rlang_1.0.6       pkgdown_2.0.6     ##> [13] jquerylib_0.1.4   pillar_1.8.1      later_1.3.0       glue_1.6.2        ##> [17] DBI_1.1.3         lifecycle_1.0.2   stringr_1.4.1     munsell_0.5.0     ##> [21] gtable_0.3.1      ragg_1.2.2        memoise_2.0.1     evaluate_0.16     ##> [25] knitr_1.40        fastmap_1.1.0     httpuv_1.6.3      fansi_1.0.2       ##> [29] highr_0.9         Rcpp_1.0.8.3      xtable_1.8-4      scales_1.2.1      ##> [33] promises_1.2.0.1  cachem_1.0.6      desc_1.4.2        jsonlite_1.8.0    ##> [37] mime_0.12         systemfonts_1.0.4 fs_1.5.2          textshaping_0.3.6 ##> [41] ggplot2_3.3.5     digest_0.6.29     stringi_1.7.6     dplyr_1.0.8       ##> [45] shiny_1.7.1       grid_4.1.1        rprojroot_2.0.3   cli_3.4.1         ##> [49] tools_4.1.1       magrittr_2.0.2    sass_0.4.1        tibble_3.1.6      ##> [53] pkgconfig_2.0.3   ellipsis_0.3.2    assertthat_0.2.1  rmarkdown_2.16    ##> [57] rstudioapi_0.14   R6_2.5.1          compiler_4.1.1"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ilias Moutsopoulos. Author, maintainer. Eleanor Williams. Author, contributor. Irina Mohorianu. Author, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moutsopoulos , Williams E, Mohorianu (2022). bulkAnalyseR: Interactive Shiny App Bulk Sequencing Data. R package version 1.0.1, https://github.com/Core-Bioinformatics/bulkAnalyseR.","code":"@Manual{,   title = {bulkAnalyseR: Interactive Shiny App for Bulk Sequencing Data},   author = {Ilias Moutsopoulos and Eleanor Williams and Irina Mohorianu},   year = {2022},   note = {R package version 1.0.1},   url = {https://github.com/Core-Bioinformatics/bulkAnalyseR}, }"},{"path":"/index.html","id":"bulkanalyser-an-accessible-interactive-pipeline-for-analysing-and-sharing-bulk-sequencing-results","dir":"","previous_headings":"","what":"Interactive Shiny App for Bulk Sequencing Data","title":"Interactive Shiny App for Bulk Sequencing Data","text":"Bulk sequencing experiments (e.g. mRNAseq, sRNAseq etc) essential exploring wide range biological questions. bring data analysis closer interpretation facilitate interactive, exploratory tasks sharing (easily accessible) information, present bulkAnalyseR, R package offers seamless, customisable solution bulk sequencing datasets. integrating state---art approaches without relying extensive computational support, replacing static images interactive panels, aim support strengthen reusability data. bulkAnalyseR enables standard analyses bulk data, using expression matrix starting point. presents outputs various steps interactive web-based interface, making easy generate, explore verify hypotheses. Moreover, app can easily shared published, incentivising research reproducibility allowing others explore processed data. Preprint: https://www.biorxiv.org/content/10.1101/2021.12.23.473982v1 Live app example: https://bioinf.stemcells.cam.ac.uk/shiny/bulkAnalyseR/Yang2019/ using components package published research please cite following papers along bulkAnalyseR manuscript: Noise removal: Moutsopoulos, . et al. (2021). noisyR: enhancing biological signal sequencing datasets characterizing random technical noise. Nucleic Acids Research, 49(14), e83–e83. Differential expression: Robinson, M. D. et al. (2009). edgeR: Bioconductor package differential expression analysis digital gene expression data. Bioinformatics, 26(1), 139–140. Love M.., et al. Moderated estimation fold change dispersion RNA-seq data DESeq2. Genome Biol. 2014; 15:550. Enrichment analysis: Raudvere, U. et al. (2019). g:Profiler: web server functional enrichment analysis conversions gene lists (2019 update). Nucleic Acids Research, 47(W1), W191–W198. Gene regulatory network inference: Huynh-Thu, V. . et al. (2010). Inferring regulatory networks expression data using tree-based methods. PloS one, 5(9), e12776.  Workflow diagram bulkAnalyseR pipeline. input comprises processed (.e. normalised, noise-corrected) expression matrix. Using bulkAnalyseR, standard steps related differential expression analyses handled seamlessley. pairwaise comparison differential expression outputs also possible (using cross plots upset plots). Finally, localised Gene Regulatory Networks can created.","code":""},{"path":[]},{"path":"/index.html","id":"defining-the-input-expression-matrix-and-corresponding-metadata","dir":"","previous_headings":"Preprocessing step","what":"Defining the input expression matrix and corresponding metadata","title":"Interactive Shiny App for Bulk Sequencing Data","text":"create shiny app using bulkAnalyseR, need processed (e.g. normalised, noise corrected) expression matrix corresponding metadata table loaded workspace. expression matrix expected genes rows (Ensembl ID row name) samples columns. first column metadata table must match column names expression matrix. columns metadata table contain information samples e.g. time points, treatment groups, demographic information etc; differential expression analysis may take account subset columns. illustrate case study 2019 paper Yang et al (https://www.sciencedirect.com/science/article/pii/S2405471219301152). Using three time points, two replicates, bulk mRNAseq samples, obtain following matrices: example metadata table:","code":""},{"path":"/index.html","id":"denoising-and-normalisation","dir":"","previous_headings":"Preprocessing step","what":"Denoising and normalisation","title":"Interactive Shiny App for Bulk Sequencing Data","text":"using expression matrix create shiny app, preprocessing performed. bulkAnalyseR contains function preprocessExpressionMatrix takes raw expression matrix input, denoises data using noisyR normalises expression levels using either quantile (default) RPM normalisation (specified using normalisation.method parameter). recommended use data denoised normalised input generateShinyApp; noisy data prone spurious, un-reproducible patterns; analyses performed unnormalised data unlikely robust. can also perform preprocessing outside preprocessExpressionMatrix function. Main function: preprocessExpressionMatrix() Supporting function: noisyr_counts_with_plot()","code":""},{"path":"/index.html","id":"generating-shiny-app","dir":"","previous_headings":"","what":"Generating shiny app","title":"Interactive Shiny App for Bulk Sequencing Data","text":"central function bulkAnalyseR generateShinyApp. function creates app.R file required objects run app .rda format target directory. key inputs generateShinyApp expression.matrix (processed using preprocessExpressionMatrix) meta. can also specify title, folder name app saved, shiny theme, well specifying organism data generated. Calling generateShinyApp parameters create folder chosen name 2 files expression_matrix.rda metadata.rda app.R defines app. see app, can call shiny::runApp() name folder parameter. app generated standalone can shared collaborators published online platform like shinyapps.io. provides easy way anyone explore data verify conclusions, increasing access promoting reproducibility bioinformatics analysis. default, app 9 panels: Sample select, Quality checks, Differential expression, Volcano MA plots, DE summary, Enrichment, Expression patterns, Cross plots, GRN inference. can choose remove one panels using default.panels parameter. default, app look like :  Screenshot Yang case study processed bulkAnalyseR app See vignette details individual panels. can also add custom extra panels data using panels.extra data.extra parameters. Main function: generateShinyApp() Panel functions (UI server components): sampleSelectPanel, QCpanel, DEpanel, DEplotPanel, DEsummaryPanel, enrichmentPanel, patternPanel, crossPanel, GRNpanel Supporting functions: DEanalysis_deseq2, DEanalysis_edger, calculate_condition_mean_sd_per_gene, determine_uds, expression_heatmap, jaccard_heatmap, ma_enhance, ma_plot, make_heatmap_matrix, make_pattern_matrix, plot_line_pattern, plot_pca, volcano_enhance, volcano_plot","code":""},{"path":"/index.html","id":"quick-start-guide","dir":"","previous_headings":"","what":"Quick Start Guide","title":"Interactive Shiny App for Bulk Sequencing Data","text":"shiny app Yang et al 2019 data can generated using following code:","code":"library(bulkAnalyseR)   #load expression matrix expression.matrix <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))  #create metadata table metadata <- data.frame(srr = colnames(expression.matrix),                     timepoint = rep(c(\"0h\", \"12h\", \"36h\"), each = 2))  #run preprocessing expression.matrix.preproc <- preprocessExpressionMatrix(expression.matrix)  #create shiny app shiny.dir <- \"shiny_Yang2019\" generateShinyApp(   expression.matrix = expression.matrix.preproc,   metadata = metadata,   shiny.dir = shiny.dir,   app.title = \"Shiny app for three timepoints from the Yang 2019 data\",   organism = \"mmusculus\",   org.db = \"org.Mm.eg.db\" )  #run shiny app shiny::runApp(shiny.dir)"},{"path":"/index.html","id":"installation-guide","dir":"","previous_headings":"","what":"Installation guide","title":"Interactive Shiny App for Bulk Sequencing Data","text":"bulkAnalyseR can installed CRAN using install.packages(“bulkAnalyseR”). Please make sure bioconductor dependencies also installed. install latest stable development version GitHub, first install CRAN dependencies well devtools use devtools::install_github(“Core-Bioinformatics/bulkAnalyseR”).","code":""},{"path":"/index.html","id":"required-cran-packages-use-installpackages","dir":"","previous_headings":"Installation guide","what":"Required CRAN packages (use install.packages())","title":"Interactive Shiny App for Bulk Sequencing Data","text":"utils stats grDevices tibble dplyr magrittr shiny shinythemes shinyWidgets shinyjqui shinyjs ggplot2 ggrepel ggnewscale ggforce ggrastr RColorBrewer glue rlang noisyr matrixStats visNetwork gprofiler2 circlize shinyLP","code":""},{"path":"/index.html","id":"required-bioconductor-packages-use-biocmanagerinstall","dir":"","previous_headings":"Installation guide","what":"Required Bioconductor packages (use BiocManager::install())","title":"Interactive Shiny App for Bulk Sequencing Data","text":"preprocessCore edgeR DESeq2 AnnotationDBI GENIE3 ComplexHeatmap","code":""},{"path":"/index.html","id":"bioconductor-annotation-packages-the-one-for-your-model-organism-is-required-human-and-mouse-ones-are-listed-here","dir":"","previous_headings":"Installation guide","what":"Bioconductor annotation packages (the one for your model organism is required, human and mouse ones are listed here)","title":"Interactive Shiny App for Bulk Sequencing Data","text":"org.Hs.eg.db org.Mm.eg.db","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/reference/calculate_condition_mean_sd_per_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate statistics for each gene of an expression matrix given a grouping — calculate_condition_mean_sd_per_gene","title":"Calculate statistics for each gene of an expression matrix given a grouping — calculate_condition_mean_sd_per_gene","text":"function calculates mean standard deviation expression gene expression matrix, grouped conditions supplied.","code":""},{"path":"/reference/calculate_condition_mean_sd_per_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate statistics for each gene of an expression matrix given a grouping — calculate_condition_mean_sd_per_gene","text":"","code":"calculate_condition_mean_sd_per_gene(expression.matrix, condition)"},{"path":"/reference/calculate_condition_mean_sd_per_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate statistics for each gene of an expression matrix given a grouping — calculate_condition_mean_sd_per_gene","text":"expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 condition condition group columns expression matrix ; must factor length ncol(expression.matrix)","code":""},{"path":"/reference/calculate_condition_mean_sd_per_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate statistics for each gene of an expression matrix given a grouping — calculate_condition_mean_sd_per_gene","text":"tibble long format, mean standard deviation gene condition. standard deviation increased minimum value expression matrix (noise threshold) lower, order avoid sensitivity small changes.","code":""},{"path":"/reference/calculate_condition_mean_sd_per_gene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate statistics for each gene of an expression matrix given a grouping — calculate_condition_mean_sd_per_gene","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:500,]  condition <- factor(rep(c(\"0h\", \"12h\", \"36h\"), each = 2)) tbl <- calculate_condition_mean_sd_per_gene(expression.matrix.preproc[1:10, ], condition) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% tbl #> # A tibble: 30 x 4 #>    gene               condition    mean    sd #>    <chr>              <fct>       <dbl> <dbl> #>  1 ENSMUSG00000025902 0h          106.   45.7 #>  2 ENSMUSG00000025902 12h          60.8  45.7 #>  3 ENSMUSG00000025902 36h          60.2  45.7 #>  4 ENSMUSG00000098104 0h           95.8  45.7 #>  5 ENSMUSG00000098104 12h          86.1  45.7 #>  6 ENSMUSG00000098104 36h          78    45.7 #>  7 ENSMUSG00000103922 0h          281.   45.7 #>  8 ENSMUSG00000103922 12h         376.   48.4 #>  9 ENSMUSG00000103922 36h         315.   45.7 #> 10 ENSMUSG00000033845 0h        10868.  933.  #> # ... with 20 more rows"},{"path":"/reference/crossPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the cross plot panel of the shiny app — crossPanel","title":"Generate the cross plot panel of the shiny app — crossPanel","text":"UI server components cross plot panel shiny app. generated including 'Cross' panels.default argument generateShinyApp.","code":""},{"path":"/reference/crossPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the cross plot panel of the shiny app — crossPanel","text":"","code":"crossPanelUI(id, metadata, show = TRUE)  crossPanelServer(id, expression.matrix, metadata, anno)"},{"path":"/reference/crossPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the cross plot panel of the shiny app — crossPanel","text":"id input slot used access value metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 show whether show panel ; default TRUE; compatibility specifying panels show expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified","code":""},{"path":"/reference/crossPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the cross plot panel of the shiny app — crossPanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/cross_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cross plot comparing differential expression (DE) results — cross_plot","title":"Create a cross plot comparing differential expression (DE) results — cross_plot","text":"function creates cross plot visualising differences log2(fold-change) two DE analyses.","code":""},{"path":"/reference/cross_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cross plot comparing differential expression (DE) results — cross_plot","text":"","code":"cross_plot(   DEtable1,   DEtable2,   DEtable1Subset,   DEtable2Subset,   df = NULL,   lfc.threshold = NULL,   raster = FALSE,   mask = FALSE,   labnames = c(\"not DE\", \"DE both\", \"DE comparison 1\", \"DE comparison 2\"),   cols.chosen = c(\"grey\", \"purple\", \"dodgerblue\", \"lightcoral\"),   labels.per.region = 5,   fix.axis.ratio = TRUE,   add.guide.lines = TRUE,   add.labels.custom = FALSE,   genes.to.label = NULL,   seed = 0,   label.force = 1 )"},{"path":"/reference/cross_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cross plot comparing differential expression (DE) results — cross_plot","text":"DEtable1, DEtable2, DEtable1Subset, DEtable2Subset tables DE results, usually generated DEanalysis_edger; first two contain genes, second two contain DE genes df Optionally, pre-computed cross plot table, cross_plot_prep raster whether rasterize non-DE genes ggraster reduce memory usage; particularly useful saving plots files mask whether hide genes called DE either comparison; default FALSE labnames, cols.chosen legend labels colours 4 categories genes (\"DE\", \"DE \", \"DE comparison 1\", \"DE comparison 2\") labels.per.region many labels show region plot; plot split 8 regions using axes major diagonals, points closest origin region labelled; default 5, set 0 labels fix.axis.ratio whether ensure x y axes units, resulting square plot; default TRUE add.guide.lines whether add vertical horizontal guide lines plot highlight thresholds; default TRUE add.labels.custom whether add labels user-specified genes; parameter genes..label must also specified; default FALSE genes..label vector gene names labelled plot; names present shown labels (values ones matched - allow custom gene names presented) seed random seed used reproducibility; used ggrepel::geom_label_repel labels present label.force passed force argument ggrepel::geom_label_repel; higher values make labels overlap less (cost away points labelling) pval.threshold log2(fold-change) threshold determine whether gene DE","code":""},{"path":"/reference/cross_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cross plot comparing differential expression (DE) results — cross_plot","text":"cross plot ggplot object.","code":""},{"path":"/reference/cross_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a cross plot comparing differential expression (DE) results — cross_plot","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:500, 1:4]  anno <- AnnotationDbi::select(   getExportedValue('org.Mm.eg.db', 'org.Mm.eg.db'),   keys = rownames(expression.matrix.preproc),   keytype = 'ENSEMBL',   columns = 'SYMBOL' ) %>%   dplyr::distinct(ENSEMBL, .keep_all = TRUE) %>%   dplyr::mutate(NAME = ifelse(is.na(SYMBOL), ENSEMBL, SYMBOL)) #>  #> 'select()' returned 1:many mapping between keys and columns    edger <- DEanalysis_edger(   expression.matrix = expression.matrix.preproc,   condition = rep(c(\"0h\", \"12h\"), each = 2),   var1 = \"0h\",   var2 = \"12h\",   anno = anno ) deseq <- DEanalysis_edger(   expression.matrix = expression.matrix.preproc,   condition = rep(c(\"0h\", \"12h\"), each = 2),   var1 = \"0h\",   var2 = \"12h\",   anno = anno ) cross_plot(   DEtable1 = edger,    DEtable2 = deseq,   DEtable1Subset = dplyr::filter(edger, abs(log2FC) > 1, pvalAdj < 0.05),   DEtable2Subset = dplyr::filter(deseq, abs(log2FC) > 1, pvalAdj < 0.05),   labels.per.region = 0 )"},{"path":"/reference/DEanalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential expression (DE) analysis on an expression matrix — DEanalysis","title":"Perform differential expression (DE) analysis on an expression matrix — DEanalysis","text":"function performs DE analysis expression using edgeR DESeq2, given vector sample conditions.","code":""},{"path":"/reference/DEanalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential expression (DE) analysis on an expression matrix — DEanalysis","text":"","code":"DEanalysis_edger(expression.matrix, condition, var1, var2, anno)  DEanalysis_deseq2(expression.matrix, condition, var1, var2, anno)"},{"path":"/reference/DEanalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential expression (DE) analysis on an expression matrix — DEanalysis","text":"expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 condition vector length number columns expression.matrix, containing sample conditions; usually last column metadata var1, var2 conditions (contained condition) perform DE ; note DESeq2 requires least two replicates per condition anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified","code":""},{"path":"/reference/DEanalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform differential expression (DE) analysis on an expression matrix — DEanalysis","text":"tibble differential expression results genes. Columns gene_id (usually ENSEMBL ID matching one rows expression matrix) gene_name (name matched annotation) log2exp (average log2(expression) gene across samples) log2FC (log2(fold-change) gene conditions) pval (p-value gene called DE) pvalAdj (adjusted p-value using Benjamini Hochberg correction)","code":""},{"path":"/reference/DEanalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform differential expression (DE) analysis on an expression matrix — DEanalysis","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:100, 1:4]  anno <- AnnotationDbi::select(   getExportedValue('org.Mm.eg.db', 'org.Mm.eg.db'),   keys = rownames(expression.matrix.preproc),   keytype = 'ENSEMBL',   columns = 'SYMBOL' ) %>%   dplyr::distinct(ENSEMBL, .keep_all = TRUE) %>%   dplyr::mutate(NAME = ifelse(is.na(SYMBOL), ENSEMBL, SYMBOL)) #> 'select()' returned 1:1 mapping between keys and columns    edger <- DEanalysis_edger(   expression.matrix = expression.matrix.preproc,   condition = rep(c(\"0h\", \"12h\"), each = 2),   var1 = \"0h\",   var2 = \"12h\",   anno = anno ) deseq <- DEanalysis_edger(   expression.matrix = expression.matrix.preproc,   condition = rep(c(\"0h\", \"12h\"), each = 2),   var1 = \"0h\",   var2 = \"12h\",   anno = anno ) # DE genes with log2(fold-change) > 1 in both pipelines intersect(   dplyr::filter(edger, abs(log2FC) > 1, pvalAdj < 0.05)$gene_name,   dplyr::filter(deseq, abs(log2FC) > 1, pvalAdj < 0.05)$gene_name ) #>  [1] \"Gm16041\"  \"Adhfe1\"   \"Tcf24\"    \"Prdm14\"   \"Eya1\"     \"Msc\"      #>  [7] \"Jph1\"     \"Crispld1\" \"Paqr8\"    \"Efhc1\""},{"path":"/reference/DEpanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the DE panel of the shiny app — DEpanel","title":"Generate the DE panel of the shiny app — DEpanel","text":"UI server components DE panel shiny app. generated including 'DE' panels.default argument generateShinyApp.","code":""},{"path":"/reference/DEpanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the DE panel of the shiny app — DEpanel","text":"","code":"DEpanelUI(id, metadata, show = TRUE)  DEpanelServer(id, expression.matrix, metadata, anno)"},{"path":"/reference/DEpanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the DE panel of the shiny app — DEpanel","text":"id input slot used access value metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 show whether show panel ; default TRUE; compatibility specifying panels show expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified","code":""},{"path":"/reference/DEpanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the DE panel of the shiny app — DEpanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/DEplotPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the DE plot plot panel of the shiny app — DEplotPanel","title":"Generate the DE plot plot panel of the shiny app — DEplotPanel","text":"UI server components DE plot panel shiny app. generated including 'DEplot' panels.default argument generateShinyApp.","code":""},{"path":"/reference/DEplotPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the DE plot plot panel of the shiny app — DEplotPanel","text":"","code":"DEplotPanelUI(id, show = TRUE)  DEplotPanelServer(id, DEresults, anno)"},{"path":"/reference/DEplotPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the DE plot plot panel of the shiny app — DEplotPanel","text":"id input slot used access value show whether show panel ; default TRUE; compatibility specifying panels show DEresults differential expression results output DEpanelServer; reactive list slots 'DEtable' (genes), 'DEtableSubset' (DE genes), 'lfcThreshold' 'pvalThreshold' anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified","code":""},{"path":"/reference/DEplotPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the DE plot plot panel of the shiny app — DEplotPanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/DEsummaryPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the DE summary panel of the shiny app — DEsummaryPanel","title":"Generate the DE summary panel of the shiny app — DEsummaryPanel","text":"UI server components Heatmap panel shiny app. generated including 'DEsummary' panels.default argument generateShinyApp.","code":""},{"path":"/reference/DEsummaryPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the DE summary panel of the shiny app — DEsummaryPanel","text":"","code":"DEsummaryPanelUI(id, metadata, show = TRUE)  DEsummaryPanelServer(id, expression.matrix, metadata, DEresults, anno)"},{"path":"/reference/DEsummaryPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the DE summary panel of the shiny app — DEsummaryPanel","text":"id input slot used access value metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 show whether show panel ; default TRUE; compatibility specifying panels show expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 DEresults differential expression results output DEpanelServer; reactive list slots 'DEtable' (genes), 'DEtableSubset' (DE genes), 'lfcThreshold' 'pvalThreshold' anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified","code":""},{"path":"/reference/DEsummaryPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the DE summary panel of the shiny app — DEsummaryPanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/determine_uds.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the pattern between two intervals — determine_uds","title":"Determine the pattern between two intervals — determine_uds","text":"function checks two input intervals oferlap outputs corresponding pattern (, , straight) based .","code":""},{"path":"/reference/determine_uds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the pattern between two intervals — determine_uds","text":"","code":"determine_uds(min1, max1, min2, max2)"},{"path":"/reference/determine_uds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the pattern between two intervals — determine_uds","text":"min1, max1, min2, max2 endpoints two intervals","code":""},{"path":"/reference/determine_uds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the pattern between two intervals — determine_uds","text":"single character (one \"U\", \"D\", \"S\") representing pattern","code":""},{"path":"/reference/determine_uds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the pattern between two intervals — determine_uds","text":"","code":"determine_uds(10, 20, 15, 25) # overlap #> [1] \"S\" determine_uds(10, 20, 25, 35) # no overlap #> [1] \"U\""},{"path":"/reference/enrichmentPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the enrichment panel of the shiny app — enrichmentPanel","title":"Generate the enrichment panel of the shiny app — enrichmentPanel","text":"UI server components enrichment panel shiny app. generated including 'Enrichment' panels.default argument generateShinyApp.","code":""},{"path":"/reference/enrichmentPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the enrichment panel of the shiny app — enrichmentPanel","text":"","code":"enrichmentPanelUI(id, show = TRUE)  enrichmentPanelServer(id, DEresults, organism, seed = 13)"},{"path":"/reference/enrichmentPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the enrichment panel of the shiny app — enrichmentPanel","text":"id input slot used access value show whether show panel ; default TRUE; compatibility specifying panels show DEresults differential expression results output DEpanelServer; reactive list slots 'DEtable' (genes), 'DEtableSubset' (DE genes), 'lfcThreshold' 'pvalThreshold' organism organism name passed gprofiler2::gost; organism names constructed concatenating first letter name family name; default NA - enrichment included ensure compatibility datasets non-standard gene names; vector (length modality) can provided length(modality) > 1 seed random seed set jitter plot, avoid seemingly different plots inputs","code":""},{"path":"/reference/enrichmentPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the enrichment panel of the shiny app — enrichmentPanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/expression_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create heatmap of an expression matrix — expression_heatmap","title":"Create heatmap of an expression matrix — expression_heatmap","text":"function creates heatmap visualise expression matrix","code":""},{"path":"/reference/expression_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create heatmap of an expression matrix — expression_heatmap","text":"","code":"expression_heatmap(   expression.matrix.subset,   top.annotation.ids = NULL,   metadata,   type = c(\"Z-score\", \"Log2 Expression\", \"Expression\"),   show.column.names = TRUE )"},{"path":"/reference/expression_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create heatmap of an expression matrix — expression_heatmap","text":"expression.matrix.subset subset rows expression matrix; rows correspond genes columns correspond samples top.annotation.ids vector column indices denoting columns metadata become heatmap annotations metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 type type rescaling; one \"Expression\" (defautl, nothing), \"Log2 Expression\" (returns log2(x + 1) every value), \"Mean Scaled\" (row scaled average), \"Z-score\" (row centered scaled mean = 0 sd = 1) show.column.names whether show column names heatmap; default TRUE","code":""},{"path":"/reference/expression_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create heatmap of an expression matrix — expression_heatmap","text":"heatmap detailed ComplexHeatmap package.","code":""},{"path":"/reference/expression_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create heatmap of an expression matrix — expression_heatmap","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:500,]  metadata <- data.frame(   srr = colnames(expression.matrix.preproc),    timepoint = rep(c(\"0h\", \"12h\", \"36h\"), each = 2) ) print(expression_heatmap(head(expression.matrix.preproc), NULL, metadata))"},{"path":"/reference/find_regulators_with_recurring_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Find recurring regulators — find_regulators_with_recurring_edges","title":"Find recurring regulators — find_regulators_with_recurring_edges","text":"function finds regulators appear network edge one input networks.","code":""},{"path":"/reference/find_regulators_with_recurring_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find recurring regulators — find_regulators_with_recurring_edges","text":"","code":"find_regulators_with_recurring_edges(weightMatList, plotConnections)"},{"path":"/reference/find_regulators_with_recurring_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find recurring regulators — find_regulators_with_recurring_edges","text":"weightMatList list (weighted) adjacency matrices; list element must adjacency matrix regulators rows, targets columns plotConnections number connections subset ","code":""},{"path":"/reference/find_regulators_with_recurring_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find recurring regulators — find_regulators_with_recurring_edges","text":"vector containing names recurring regulators","code":""},{"path":"/reference/find_regulators_with_recurring_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find recurring regulators — find_regulators_with_recurring_edges","text":"","code":"weightMat1 <- matrix(   c(0.1, 0.4, 0.8, 0.3), nrow = 2, ncol = 2,   dimnames = list(\"regulators\" = c(\"r1\", \"r2\"), \"targets\" = c(\"t1\", \"t2\")) ) weightMat2 <- matrix(   c(0.1, 0.2, 0.8, 0.3), nrow = 2, ncol = 2,   dimnames = list(\"regulators\" = c(\"r1\", \"r2\"), \"targets\" = c(\"t1\", \"t2\")) ) find_regulators_with_recurring_edges(list(weightMat1, weightMat2), 2) #> [1] \"r1\""},{"path":"/reference/generateShinyApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate all files required for an autonomous shiny app — generateShinyApp","title":"Generate all files required for an autonomous shiny app — generateShinyApp","text":"function creates app.R file required objects run app .rda format target directory. basic argument check performed avoid input data problems. app directory standalone can used another platform, long bulkAnalyseR installed . recommended run preprocessExpressionMatrix function.","code":""},{"path":"/reference/generateShinyApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate all files required for an autonomous shiny app — generateShinyApp","text":"","code":"generateShinyApp(   shiny.dir = \"shiny_bulkAnalyseR\",   app.title = \"Visualisation of RNA-Seq data\",   theme = \"flatly\",   modality = \"RNA\",   expression.matrix,   metadata,   organism = NA,   org.db = NA,   panels.default = c(\"Landing\", \"SampleSelect\", \"QC\", \"GRN\", \"DE\", \"DEplot\", \"DEsummary\",     \"Enrichment\", \"GRNenrichment\", \"Cross\", \"Patterns\"),   panels.extra = tibble::tibble(name = NULL, UIfun = NULL, UIvars = NULL, serverFun =     NULL, serverVars = NULL),   data.extra = list(),   packages.extra = c(),   cis.integration = tibble::tibble(reference.expression.matrix = NULL, reference.org.db =     NULL, reference.coord = NULL, comparison.coord = NULL, reference.table.name = NULL,     comparison.table.name = NULL),   trans.integration = tibble::tibble(reference.expression.matrix = NULL, reference.org.db     = NULL, comparison.expression.matrix = NULL, comparison.org.db = NULL,     reference.table.name = NULL, comparison.table.name = NULL),   custom.integration = tibble::tibble(reference.expression.matrix = NULL,     reference.org.db = NULL, comparison.table = NULL, reference.table.name = NULL,     comparison.table.name = NULL) )"},{"path":"/reference/generateShinyApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate all files required for an autonomous shiny app — generateShinyApp","text":"shiny.dir directory store shiny app; non-empty directory name already exists error generated app.title title displayed within app theme shiny theme used app; default 'flatly' modality name modality, vector modalities included app expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 organism organism name passed gprofiler2::gost; organism names constructed concatenating first letter name family name; default NA - enrichment included ensure compatibility datasets non-standard gene names; vector (length modality) can provided length(modality) > 1 org.db database annotations transform ENSEMBL IDs gene names; list bioconductor packaged databases can found BiocManager::available(\"^org\\.\"); default NA, case row names expression matrix used directly - recommended provide ENSEMBL IDs database model organism available; vector (length modality) can provided length(modality) > 1 panels.default argument control default panels included app; default , enrichment panel appear unless organism also supplied; note 'DE' panel required 'DEplot', 'DEsummary', 'Enrichment', 'GRNenrichment'; list  (length modality) can provided length(modality) > 1 panels.extra, data.extra, packages.extra functionality add new user-created panels app extend functionality change default behaviour existing panels; data frame modality, panel UI server names default parameters passed panels.extra (see example); names packages required passed packages.extra argument; extra data single list passed data.extra argument cis.integration functionality integrate extra cis-regulatory information GRN panel. Tibble containing names reference expression matrix, tables coordinates elements corresponding rows reference expression matrix (reference.coord), tables coordinates compare reference.coord (comparison.coord) names comparison tables. See vignettes details inputs. trans.integration functionality integrate extra trans-regulatory information GRN panel. Tibble containing names reference expression matrix, (reference.expression.matrix), comparison expression matrix (comparison.expression.matrix). Organism database names expression matrix names table also required. See vignettes details inputs. custom.integration functionality integrate custom information related rows reference expression matrix. Tibble containing names reference expression matrix, tables (comparison.table) Reference_ID Reference_Name (matching ENSEMBL NAME columns reference organism database) Comparison_ID Comparison_Name plus Category column containing extra information. Names reference expression matrix comparison table (comparison.table.name) also required. See vignettes details inputs.","code":""},{"path":"/reference/generateShinyApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate all files required for an autonomous shiny app — generateShinyApp","text":"path shiny.dir (invisibly).","code":""},{"path":"/reference/generateShinyApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate all files required for an autonomous shiny app — generateShinyApp","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 )) metadata <- data.frame(   srr = colnames(expression.matrix.preproc),    timepoint = rep(c(\"0h\", \"12h\", \"36h\"), each = 2) ) app.dir <- generateShinyApp(   shiny.dir = paste0(tempdir(), \"/shiny_Yang2019\"),   app.title = \"Shiny app for the Yang 2019 data\",   modality = \"RNA\",   expression.matrix = expression.matrix.preproc,   metadata = metadata,   organism = \"mmusculus\",   org.db = \"org.Mm.eg.db\" ) #> App created! To launch, run shiny::runApp('C:\\Users\\emouts\\AppData\\Local\\Temp\\RtmpErXRzg/shiny_Yang2019') # runApp(app.dir)  # Example of an app with a second copy of the QC panel app.dir.qc2 <- generateShinyApp(   shiny.dir = paste0(tempdir(), \"/shiny_Yang2019_QC2\"),   app.title = \"Shiny app for the Yang 2019 data\",   expression.matrix = expression.matrix.preproc,   metadata = metadata,   organism = \"mmusculus\",   org.db = \"org.Mm.eg.db\",   panels.extra = tibble::tibble(     name = \"RNA2\",     UIfun = \"modalityPanelUI\",      UIvars = \"'RNA2', metadata[[1]], NA, 'QC'\",      serverFun = \"modalityPanelServer\",      serverVars = \"'RNA2', expression.matrix[[1]], metadata[[1]], anno[[1]], NA, 'QC'\"   ) ) #> App created! To launch, run shiny::runApp('C:\\Users\\emouts\\AppData\\Local\\Temp\\RtmpErXRzg/shiny_Yang2019_QC2') # runApp(app.dir.qc2)  # clean up tempdir unlink(paste0(normalizePath(tempdir()), \"/\", dir(tempdir())), recursive = TRUE)"},{"path":"/reference/get_link_list_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the adjacency matrix to network links — get_link_list_rename","title":"Convert the adjacency matrix to network links — get_link_list_rename","text":"function converts adjacency matrix data frame network links, subset important ones.","code":""},{"path":"/reference/get_link_list_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the adjacency matrix to network links — get_link_list_rename","text":"","code":"get_link_list_rename(weightMat, plotConnections)"},{"path":"/reference/get_link_list_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the adjacency matrix to network links — get_link_list_rename","text":"weightMat (weighted) adjacency matrix - regulators rows, targets columns plotConnections number connections subset ","code":""},{"path":"/reference/get_link_list_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the adjacency matrix to network links — get_link_list_rename","text":"data frame fields , value, describing edges network","code":""},{"path":"/reference/get_link_list_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert the adjacency matrix to network links — get_link_list_rename","text":"","code":"weightMat <- matrix(   c(0.1, 0.4, 0.8, 0.3), nrow = 2, ncol = 2,   dimnames = list(\"regulators\" = c(\"r1\", \"r2\"), \"targets\" = c(\"t1\", \"t2\")) ) get_link_list_rename(weightMat, 2) #>   from to value #> 1   r1 t2   0.8 #> 2   r2 t1   0.4"},{"path":"/reference/GRNCisPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the GRN cis integration panel of the shiny app — GRNCisPanel","title":"Generate the GRN cis integration panel of the shiny app — GRNCisPanel","text":"UI server components GRN cis integration panel shiny app. generated including least 1 row cis.integration parameter generateShinyApp.","code":""},{"path":"/reference/GRNCisPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the GRN cis integration panel of the shiny app — GRNCisPanel","text":"","code":"GRNCisPanelUI(id, reference.table.name, comparison.table.name)  GRNCisPanelServer(   id,   expression.matrix,   anno,   coord.table.reference,   coord.table.comparison,   seed = 13 )"},{"path":"/reference/GRNCisPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the GRN cis integration panel of the shiny app — GRNCisPanel","text":"id input slot used access value reference.table.name Name reference expression matrix coordinate table comparison.table.name Name comparison coordinate table expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified coord.table.reference Table coordinates corresponding rows expression.matrix coord.table.comparison Table coordinates compare coord.table.reference seed Random seed create reproducible GRNs","code":""},{"path":"/reference/GRNCisPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the GRN cis integration panel of the shiny app — GRNCisPanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/GRNCustomPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the GRN custom integration panel of the shiny app — GRNCustomPanel","title":"Generate the GRN custom integration panel of the shiny app — GRNCustomPanel","text":"UI server components GRN custom integration panel shiny app. generated including least 1 row custom.integration parameter generateShinyApp.","code":""},{"path":"/reference/GRNCustomPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the GRN custom integration panel of the shiny app — GRNCustomPanel","text":"","code":"GRNCustomPanelUI(id, title = \"GRN with custom integration\", show = TRUE)  GRNCustomPanelServer(   id,   expression.matrix,   anno,   comparison.table,   DEresults = NULL,   seed = 13 )"},{"path":"/reference/GRNCustomPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the GRN custom integration panel of the shiny app — GRNCustomPanel","text":"id input slot used access value title Name custom panel instance show whether show panel ; default TRUE; compatibility specifying panels show expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified comparison.table Table linking rows expression.matrix custom information, example miRNAs transcription factors. DEresults differential expression results output DEpanelServer; reactive list slots 'DEtable' (genes), 'DEtableSubset' (DE genes), 'lfcThreshold' 'pvalThreshold' seed Random seed create reproducible GRNs","code":""},{"path":"/reference/GRNCustomPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the GRN custom integration panel of the shiny app — GRNCustomPanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/GRNpanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the GRN panel of the shiny app — GRNpanel","title":"Generate the GRN panel of the shiny app — GRNpanel","text":"UI server components GRN panel shiny app. generated including 'GRN' panels.default argument generateShinyApp.","code":""},{"path":"/reference/GRNpanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the GRN panel of the shiny app — GRNpanel","text":"","code":"GRNpanelUI(id, metadata, show = TRUE)  GRNpanelServer(id, expression.matrix, metadata, anno)"},{"path":"/reference/GRNpanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the GRN panel of the shiny app — GRNpanel","text":"id input slot used access value metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 show whether show panel ; default TRUE; compatibility specifying panels show expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified","code":""},{"path":"/reference/GRNpanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the GRN panel of the shiny app — GRNpanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/GRNTransPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the GRN trans integration panel of the shiny app — GRNTransPanel","title":"Generate the GRN trans integration panel of the shiny app — GRNTransPanel","text":"UI server components GRN trans integration panel shiny app. generated including least 1 row trans.integration parameter generateShinyApp.","code":""},{"path":"/reference/GRNTransPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the GRN trans integration panel of the shiny app — GRNTransPanel","text":"","code":"GRNTransPanelUI(id, reference.table.name, comparison.table.name)  GRNTransPanelServer(   id,   expression.matrix,   anno,   anno.comparison,   expression.matrix.comparison,   tablenames,   seed = 13 )"},{"path":"/reference/GRNTransPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the GRN trans integration panel of the shiny app — GRNTransPanel","text":"id input slot used access value expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified anno.comparison annotation data frame containing match row names comparison expression matrix names rendered within app output files. structure matches anno table created generateShinyApp using org.db specified expression.matrix.comparison Additional expression matrix integrate. Column names must match column names expression.matrix. tablenames, reference.table.name, comparison.table.name Names reference comparison expression tables. seed Random seed create reproducible GRNs","code":""},{"path":"/reference/GRNTransPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the GRN trans integration panel of the shiny app — GRNTransPanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/infer_GRN.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform GRN inference — infer_GRN","title":"Perform GRN inference — infer_GRN","text":"function performs Gene Regulatory Network inference subset expression matrix, set potential targets","code":""},{"path":"/reference/infer_GRN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform GRN inference — infer_GRN","text":"","code":"infer_GRN(   expression.matrix,   metadata,   anno,   seed = 13,   targets,   condition,   samples,   inference_method )"},{"path":"/reference/infer_GRN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform GRN inference — infer_GRN","text":"expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified seed random seed set running GRN inference, ensure reproducibility outputs targets target genes interest around GRN built; must row names expression matrix condition name metadata column select samples samples names sample groups select; must appear metadata[[condition]] inference_method method used GRN inference; supported method currently GENIE3.","code":""},{"path":"/reference/infer_GRN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform GRN inference — infer_GRN","text":"adjacency matrix inferred network","code":""},{"path":"/reference/infer_GRN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform GRN inference — infer_GRN","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:500, ]  metadata <- data.frame(   srr = colnames(expression.matrix.preproc),    timepoint = rep(c(\"0h\", \"12h\", \"36h\"), each = 2) )  anno <- AnnotationDbi::select(   getExportedValue('org.Mm.eg.db', 'org.Mm.eg.db'),   keys = rownames(expression.matrix.preproc),   keytype = 'ENSEMBL',   columns = 'SYMBOL' ) %>%   dplyr::distinct(ENSEMBL, .keep_all = TRUE) %>%   dplyr::mutate(NAME = ifelse(is.na(SYMBOL), ENSEMBL, SYMBOL)) #> 'select()' returned 1:many mapping between keys and columns  res <- infer_GRN(   expression.matrix = expression.matrix.preproc,   metadata = metadata,   anno = anno,   seed = 13,   targets = c(\"Hecw2\", \"Akr1cl\"),   condition = \"timepoint\",   samples = \"0h\",   inference_method = \"GENIE3\" )"},{"path":"/reference/jaccard_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heatmap of the Jaccard similarity index (JSI) between samples of\r\nan experiment — jaccard_heatmap","title":"Create a heatmap of the Jaccard similarity index (JSI) between samples of\r\nan experiment — jaccard_heatmap","text":"function creates JSI heatmap samples expression matrix using specified number abundant genes input. Metadata columns used annotations.","code":""},{"path":"/reference/jaccard_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heatmap of the Jaccard similarity index (JSI) between samples of\r\nan experiment — jaccard_heatmap","text":"","code":"jaccard_heatmap(   expression.matrix,   metadata,   top.annotation.ids = NULL,   n.abundant = NULL,   show.values = TRUE,   show.row.column.names = TRUE )"},{"path":"/reference/jaccard_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heatmap of the Jaccard similarity index (JSI) between samples of\r\nan experiment — jaccard_heatmap","text":"expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 top.annotation.ids vector column indices denoting columns metadata become heatmap annotations n.abundant number abundant genes use JSI calculation show.values whether show JSI values within heatmap squares show.row.column.names whether show row column names heatmap; default TRUE","code":""},{"path":"/reference/jaccard_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heatmap of the Jaccard similarity index (JSI) between samples of\r\nan experiment — jaccard_heatmap","text":"JSI heatmap detailed ComplexHeatmap package.","code":""},{"path":"/reference/jaccard_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a heatmap of the Jaccard similarity index (JSI) between samples of\r\nan experiment — jaccard_heatmap","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:500,]  metadata <- data.frame(   srr = colnames(expression.matrix.preproc),    timepoint = rep(c(\"0h\", \"12h\", \"36h\"), each = 2) ) print(jaccard_heatmap(expression.matrix.preproc, metadata, n.abundant = 100))"},{"path":"/reference/jaccard_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Jaccard similarity index (JSI) between two vectors — jaccard_index","title":"Calculate the Jaccard similarity index (JSI) between two vectors — jaccard_index","text":"Calculate Jaccard similarity index (JSI) two vectors","code":""},{"path":"/reference/jaccard_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Jaccard similarity index (JSI) between two vectors — jaccard_index","text":"","code":"jaccard_index(a, b)"},{"path":"/reference/jaccard_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Jaccard similarity index (JSI) between two vectors — jaccard_index","text":", b two vectors","code":""},{"path":"/reference/jaccard_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Jaccard similarity index (JSI) between two vectors — jaccard_index","text":"JSI two vectors, single value 0 1.","code":""},{"path":"/reference/jaccard_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Jaccard similarity index (JSI) between two vectors — jaccard_index","text":"","code":"jaccard_index(1:4, 2:6) #> [1] 0.5"},{"path":"/reference/landingPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the landing page panel of the shiny app — landingPanel","title":"Generate the landing page panel of the shiny app — landingPanel","text":"UI server components landing page panel shiny app. generated including 'Landing' panels.default argument generateShinyApp.","code":""},{"path":"/reference/landingPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the landing page panel of the shiny app — landingPanel","text":"","code":"landingPanelUI(id, show = TRUE)  landingPanelServer(id)"},{"path":"/reference/landingPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the landing page panel of the shiny app — landingPanel","text":"id input slot used access value show whether show panel ; default TRUE; compatibility specifying panels show","code":""},{"path":"/reference/landingPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the landing page panel of the shiny app — landingPanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/make_heatmap_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a matrix of the average expression of each gene in each condition — make_heatmap_matrix","title":"Create a matrix of the average expression of each gene in each condition — make_heatmap_matrix","text":"function reshapes tibble output calculate_condition_mean_sd_per_gene matrix average expression condition. output can used expression_heatmap.","code":""},{"path":"/reference/make_heatmap_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a matrix of the average expression of each gene in each condition — make_heatmap_matrix","text":"","code":"make_heatmap_matrix(tbl, genes = NULL)"},{"path":"/reference/make_heatmap_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a matrix of the average expression of each gene in each condition — make_heatmap_matrix","text":"tbl output calculate_condition_mean_sd_per_gene genes gene names use output; NULL (default), genes used","code":""},{"path":"/reference/make_heatmap_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a matrix of the average expression of each gene in each condition — make_heatmap_matrix","text":"matrix averaged expression per gene condition.","code":""},{"path":"/reference/make_heatmap_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a matrix of the average expression of each gene in each condition — make_heatmap_matrix","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:500,]  condition <- factor(rep(c(\"0h\", \"12h\", \"36h\"), each = 2)) tbl <- calculate_condition_mean_sd_per_gene(expression.matrix.preproc[1:10, ], condition) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% heatmat <- make_heatmap_matrix(tbl) heatmat #>                             0h         12h         36h #> ENSMUSG00000025902   106.08333    60.83333    60.16667 #> ENSMUSG00000098104    95.79167    86.08333    78.00000 #> ENSMUSG00000103922   280.58333   376.25000   314.75000 #> ENSMUSG00000033845 10868.08333 15160.50000 14283.25000 #> ENSMUSG00000102275   128.00000   160.83333   178.00000 #> ENSMUSG00000025903  3631.16667  5029.83333  3911.41667 #> ENSMUSG00000033813  5351.91667  6687.16667  6705.16667 #> ENSMUSG00000002459    66.33333    79.33333   137.00000 #> ENSMUSG00000085623    47.41667   137.16667    95.58333 #> ENSMUSG00000033793  8102.83333  6115.25000  7749.75000"},{"path":"/reference/make_pattern_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a matrix of the patterns between conditions — make_pattern_matrix","title":"Create a matrix of the patterns between conditions — make_pattern_matrix","text":"function determines patterns different conditions gene. applied output calculate_condition_mean_sd_per_gene.","code":""},{"path":"/reference/make_pattern_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a matrix of the patterns between conditions — make_pattern_matrix","text":"","code":"make_pattern_matrix(tbl, n_sd = 2)"},{"path":"/reference/make_pattern_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a matrix of the patterns between conditions — make_pattern_matrix","text":"tbl output calculate_condition_mean_sd_per_gene n_sd number standard deviations mean use construct intervals; default 2","code":""},{"path":"/reference/make_pattern_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a matrix of the patterns between conditions — make_pattern_matrix","text":"matrix single character patterns conditions. last column named pattern concatenation columns.","code":""},{"path":"/reference/make_pattern_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a matrix of the patterns between conditions — make_pattern_matrix","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:500,]  condition <- factor(rep(c(\"0h\", \"12h\", \"36h\"), each = 2)) tbl <- calculate_condition_mean_sd_per_gene(expression.matrix.preproc[1:10, ], condition) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% patmat <- make_pattern_matrix(tbl) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% patmat #>                    0h -> 12h 12h -> 36h pattern #> ENSMUSG00000025902 \"S\"       \"S\"        \"SS\"    #> ENSMUSG00000098104 \"S\"       \"S\"        \"SS\"    #> ENSMUSG00000103922 \"S\"       \"S\"        \"SS\"    #> ENSMUSG00000033845 \"U\"       \"S\"        \"US\"    #> ENSMUSG00000102275 \"S\"       \"S\"        \"SS\"    #> ENSMUSG00000025903 \"S\"       \"S\"        \"SS\"    #> ENSMUSG00000033813 \"S\"       \"S\"        \"SS\"    #> ENSMUSG00000002459 \"S\"       \"S\"        \"SS\"    #> ENSMUSG00000085623 \"S\"       \"S\"        \"SS\"    #> ENSMUSG00000033793 \"D\"       \"U\"        \"DU\""},{"path":"/reference/ma_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an MA plot visualising differential expression (DE) results — ma_plot","title":"Create an MA plot visualising differential expression (DE) results — ma_plot","text":"function creates MA plot visualise results DE analysis. ma_enhance called indirectly ma_plot add extra features.","code":""},{"path":"/reference/ma_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an MA plot visualising differential expression (DE) results — ma_plot","text":"","code":"ma_plot(   genes.de.results,   pval.threshold = 0.05,   lfc.threshold = 1,   alpha = 0.1,   ylims = NULL,   add.colours = TRUE,   add.expression.colour.gradient = TRUE,   add.guide.lines = TRUE,   add.labels.auto = TRUE,   add.labels.custom = FALSE,   ... )  ma_enhance(   p,   df,   pval.threshold,   lfc.threshold,   alpha,   add.colours,   point.colours = c(\"#bfbfbf\", \"orange\", \"red\", \"blue\"),   raster = FALSE,   add.expression.colour.gradient,   colour.gradient.scale = list(left = c(\"#99e6ff\", \"#000066\"), right = c(\"#99e6ff\",     \"#000066\")),   colour.gradient.breaks = waiver(),   colour.gradient.limits = NULL,   add.guide.lines,   guide.line.colours = c(\"green\", \"blue\"),   add.labels.auto,   add.labels.custom,   annotation = NULL,   n.labels.auto = c(5, 5, 5),   genes.to.label = NULL,   seed = 0,   label.force = 1 )"},{"path":"/reference/ma_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an MA plot visualising differential expression (DE) results — ma_plot","text":"genes.de.results table DE genes, usually generated DEanalysis_edger pval.threshold, lfc.threshold p-value /log2(fold-change) thresholds determine whether gene DE alpha transparency points; ignored DE genes add.expression.colour.gradient TRUE; default 0.1 ylims single value create (symmetric) y-axis limits; default inferred data add.colours whether colour genes based log2(fold-change) -log10(p-value); default TRUE add.expression.colour.gradient whether add colour gradient DE genes present log2(expression); default TRUE add.guide.lines whether add vertical horizontal guide lines plot highlight thresholds; default TRUE add.labels.auto whether automatically label genes highest |log2(fold-change)| expression; default TRUE add.labels.custom whether add labels user-specified genes; parameter genes..label must also specified; default FALSE ... parameters passed ma_enhance p MA plot ggplot object (usually passed ma_plot) df data frame DE results genes (usually passed ma_plot) point.colours vector 4 colours colour genes pval lfc thresholds, just pval threshold, just lfc threshold, pval lfc threshold (DE genes) respectively; used add.colours TRUE raster whether rasterize non-DE genes ggraster reduce memory usage; particularly useful saving plots files colour.gradient.scale vector two colours create colour gradient colouring DE genes based expression; named list components left right can supplied use two different colour scales; used add.expression.colour.gradient TRUE colour.gradient.breaks, colour.gradient.limits parameters customise legend colour gradient scale; especially useful creating multiple plots plot two scales; used add.expression.colour.gradient TRUE guide.line.colours vector two colours used colour guide lines; first colour used p-value log2(fold-change) thresholds second double values annotation annotation data frame containing match gene field df (usually ENSEMBL IDs) gene names shown plot labels; necessary df already contains gene names n.labels.auto integer vector length 3 denoting number genes automatically labelled; first entry corresponds DE genes lowest p-value, second highest absolute log2(fold-change) third highest expression; single integer can also specified, used 3 entries; default 5 genes..label vector gene names labelled plot; names present shown labels (values ones matched - allow custom gene names presented) seed random seed used reproducibility; used ggrepel::geom_label_repel labels present label.force passed force argument ggrepel::geom_label_repel; higher values make labels overlap less (cost away points labelling)","code":""},{"path":"/reference/ma_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an MA plot visualising differential expression (DE) results — ma_plot","text":"MA plot ggplot object. enhanced MA plot ggplot object.","code":""},{"path":"/reference/ma_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an MA plot visualising differential expression (DE) results — ma_plot","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:500, 1:4]  anno <- AnnotationDbi::select(   getExportedValue('org.Mm.eg.db', 'org.Mm.eg.db'),   keys = rownames(expression.matrix.preproc),   keytype = 'ENSEMBL',   columns = 'SYMBOL' ) %>%   dplyr::distinct(ENSEMBL, .keep_all = TRUE) %>%   dplyr::mutate(NAME = ifelse(is.na(SYMBOL), ENSEMBL, SYMBOL)) #> 'select()' returned 1:many mapping between keys and columns    edger <- DEanalysis_edger(   expression.matrix = expression.matrix.preproc,   condition = rep(c(\"0h\", \"12h\"), each = 2),   var1 = \"0h\",   var2 = \"12h\",   anno = anno ) mp <- ma_plot(edger) print(mp)"},{"path":"/reference/modalityPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an app panel for a modality — modalityPanel","title":"Generate an app panel for a modality — modalityPanel","text":"UI server components modality panel shiny app. Different modalities can included specifying inputs generateShinyApp.","code":""},{"path":"/reference/modalityPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an app panel for a modality — modalityPanel","text":"","code":"modalityPanelUI(id, metadata, organism, panels.default)  modalityPanelServer(   id,   expression.matrix,   metadata,   anno,   organism,   panels.default )"},{"path":"/reference/modalityPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an app panel for a modality — modalityPanel","text":"id input slot used access value metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 organism organism name passed gprofiler2::gost; organism names constructed concatenating first letter name family name; default NA - enrichment included ensure compatibility datasets non-standard gene names; vector (length modality) can provided length(modality) > 1 panels.default argument control default panels included app; default , enrichment panel appear unless organism also supplied; note 'DE' panel required 'DEplot', 'DEsummary', 'Enrichment', 'GRNenrichment'; list  (length modality) can provided length(modality) > 1 expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified","code":""},{"path":"/reference/modalityPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an app panel for a modality — modalityPanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/noisyr_counts_with_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a modified noisyR counts pipeline printing a plot — noisyr_counts_with_plot","title":"Apply a modified noisyR counts pipeline printing a plot — noisyr_counts_with_plot","text":"function identical noisyr::noisyr_counts function, addition option print line plot similarity expression samples.","code":""},{"path":"/reference/noisyr_counts_with_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a modified noisyR counts pipeline printing a plot — noisyr_counts_with_plot","text":"","code":"noisyr_counts_with_plot(   expression.matrix,   n.elements.per.window = NULL,   optimise.window.length.logical = FALSE,   similarity.threshold = 0.25,   method.chosen = \"Boxplot-IQR\",   ...,   output.plot = FALSE )"},{"path":"/reference/noisyr_counts_with_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a modified noisyR counts pipeline printing a plot — noisyr_counts_with_plot","text":"expression.matrix expression matrix; rows correspond genes columns correspond samples n.elements.per.window number elements window passed calculate_expression_similarity_counts(); default 10% number rows optimise.window.length.logical whether call optimise_window_length try optimise value n.elements.per.window similarity.threshold, method.chosen parameters passed calculate_noise_threshold; can single values vectors; vectors optimal values computed calling calculate_noise_threshold_method_statistics minimising coefficient variation across samples; possible values method.chosen can viewed get_methods_calculate_noise_threshold ... optional arguments passed noisyr::noisyr_counts() output.plot whether create expression-similarity plot noise analysis (printed console); default FALSE","code":""},{"path":"/reference/noisyr_counts_with_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a modified noisyR counts pipeline printing a plot — noisyr_counts_with_plot","text":"denoised expression matrix.","code":""},{"path":"/reference/noisyr_counts_with_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a modified noisyR counts pipeline printing a plot — noisyr_counts_with_plot","text":"","code":"expression.matrix <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:10, 1:4] expression.matrix.denoised <- noisyr_counts_with_plot(expression.matrix) #> >>> noisyR counts approach pipeline <<< #> The input matrix has 10 rows and 4 cols #>     number of genes: 10 #>     number of samples: 4 #> Calculating the number of elements per window #>     the number of elements per window is 1 #>     the step size is 1 #>     the selected similarity metric is correlation_pearson #>   Working with sample 1 #>   Working with sample 2 #>   Working with sample 3 #>   Working with sample 4 #> Similarity calculation produced too many NAs, returning zero... #> Denoising expression matrix... #>     removing noisy genes #>     adjusting matrix #> >>> Done! <<<"},{"path":"/reference/patternPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the expression patterns panel of the shiny app — patternPanel","title":"Generate the expression patterns panel of the shiny app — patternPanel","text":"UI server components expression patterns panel shiny app. generated including 'Patterns' panels.default argument generateShinyApp.","code":""},{"path":"/reference/patternPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the expression patterns panel of the shiny app — patternPanel","text":"","code":"patternPanelUI(id, metadata, show = TRUE)  patternPanelServer(id, expression.matrix, metadata, anno)"},{"path":"/reference/patternPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the expression patterns panel of the shiny app — patternPanel","text":"id input slot used access value metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 show whether show panel ; default TRUE; compatibility specifying panels show expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified","code":""},{"path":"/reference/patternPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the expression patterns panel of the shiny app — patternPanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plot_GRN.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a GRN — plot_GRN","title":"Plot a GRN — plot_GRN","text":"function creates network plot GRN.","code":""},{"path":"/reference/plot_GRN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a GRN — plot_GRN","text":"","code":"plot_GRN(   weightMat,   anno,   plotConnections,   plot_position_grid,   n_networks,   recurring_regulators )"},{"path":"/reference/plot_GRN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a GRN — plot_GRN","text":"weightMat (weighted) adjacency matrix - regulators rows, targets columns anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified plotConnections number connections subset plot_position_grid, n_networks position plot grid (1-4) number networks shown (1-4); solely used hiding unwanted plots shiny app recurring_regulators targets highlighted; usually result find_regulators_with_recurring_edges","code":""},{"path":"/reference/plot_GRN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a GRN — plot_GRN","text":"network plot. See visNetwork package details.","code":""},{"path":"/reference/plot_GRN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a GRN — plot_GRN","text":"","code":"weightMat1 <- matrix(   c(0.1, 0.4, 0.8, 0.3), nrow = 2, ncol = 2,   dimnames = list(\"regulators\" = c(\"r1\", \"r2\"), \"targets\" = c(\"t1\", \"t2\")) ) weightMat2 <- matrix(   c(0.1, 0.2, 0.8, 0.3), nrow = 2, ncol = 2,   dimnames = list(\"regulators\" = c(\"r1\", \"r2\"), \"targets\" = c(\"t1\", \"t2\")) ) anno <- tibble::tibble(ENSEMBL = c(\"r1\", \"r2\", \"t1\", \"t2\"), NAME = ENSEMBL) recurring_regulators <- find_regulators_with_recurring_edges(list(weightMat1, weightMat2), 2) plot_GRN(weightMat1, anno, 2, 1, 1, recurring_regulators)  {\"x\":{\"nodes\":{\"id\":[\"t2\",\"t1\",\"r1\",\"r2\"],\"label\":[\"t2\",\"t1\",\"r1\",\"r2\"],\"group\":[\"target\",\"target\",\"recurring_regulator\",\"regulator\"],\"color\":[\"#D2E5FF\",\"#D2E5FF\",\"#ACE9B4\",\"#E0E0E0\"]},\"edges\":{\"from\":[\"r1\",\"r2\"],\"to\":[\"t2\",\"t1\"],\"value\":[0.8,0.4]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\"},\"manipulation\":{\"enabled\":false}},\"groups\":[\"target\",\"recurring_regulator\",\"regulator\"],\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false},\"byselection\":{\"enabled\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\"},\"evals\":[],\"jsHooks\":[]}plot_GRN(weightMat2, anno, 2, 1, 1, recurring_regulators)  {\"x\":{\"nodes\":{\"id\":[\"t2\",\"r1\",\"r2\"],\"label\":[\"t2\",\"r1\",\"r2\"],\"group\":[\"target\",\"recurring_regulator\",\"regulator\"],\"color\":[\"#D2E5FF\",\"#ACE9B4\",\"#E0E0E0\"]},\"edges\":{\"from\":[\"r1\",\"r2\"],\"to\":[\"t2\",\"t2\"],\"value\":[0.8,0.3]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\"},\"manipulation\":{\"enabled\":false}},\"groups\":[\"target\",\"recurring_regulator\",\"regulator\"],\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false},\"byselection\":{\"enabled\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/plot_line_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a line plot of average expression across conditions — plot_line_pattern","title":"Create a line plot of average expression across conditions — plot_line_pattern","text":"function creates line plot average expression across conditions selection genes, usually visualise expression pattern.","code":""},{"path":"/reference/plot_line_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a line plot of average expression across conditions — plot_line_pattern","text":"","code":"plot_line_pattern(   tbl,   genes = NULL,   type = c(\"Mean Scaled\", \"Log2 Expression\", \"Expression\"),   show.legend = FALSE )"},{"path":"/reference/plot_line_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a line plot of average expression across conditions — plot_line_pattern","text":"tbl output calculate_condition_mean_sd_per_gene genes gene names use output; NULL (default), genes used type whether expression values scaled using mean (default), log-transformed, adjusted plot show.legend whether show gene names legend; avoided many genes plotted","code":""},{"path":"/reference/plot_line_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a line plot of average expression across conditions — plot_line_pattern","text":"matrix average gene expression per gene condition.","code":""},{"path":"/reference/plot_line_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a line plot of average expression across conditions — plot_line_pattern","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:500,]  condition <- factor(rep(c(\"0h\", \"12h\", \"36h\"), each = 2)) tbl <- calculate_condition_mean_sd_per_gene(expression.matrix.preproc[1:10, ], condition) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% plot_line_pattern(tbl)"},{"path":"/reference/plot_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a principal component analysis (PCA) plot the samples of an experiment — plot_pca","title":"Create a principal component analysis (PCA) plot the samples of an experiment — plot_pca","text":"function creates PCA plot samples expression matrix using specified number abundant genes input. metadata column used annotation.","code":""},{"path":"/reference/plot_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a principal component analysis (PCA) plot the samples of an experiment — plot_pca","text":"","code":"plot_pca(   expression.matrix,   metadata,   annotation.id,   n.abundant = NULL,   show.labels = FALSE,   show.ellipses = TRUE,   label.force = 1 )"},{"path":"/reference/plot_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a principal component analysis (PCA) plot the samples of an experiment — plot_pca","text":"expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 annotation.id column index denoting column metadata used colour points draw confidence ellipses n.abundant number abundant genes use JSI calculation show.labels whether label points sample names show.ellipses whether draw confidence ellipses label.force passed force argument ggrepel::geom_label_repel; higher values make labels overlap less (cost away points labelling)","code":""},{"path":"/reference/plot_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a principal component analysis (PCA) plot the samples of an experiment — plot_pca","text":"PCA plot ggplot object.","code":""},{"path":"/reference/plot_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a principal component analysis (PCA) plot the samples of an experiment — plot_pca","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:500,]  metadata <- data.frame(   srr = colnames(expression.matrix.preproc),    timepoint = rep(c(\"0h\", \"12h\", \"36h\"), each = 2) ) plot_pca(expression.matrix.preproc, metadata, 2)"},{"path":"/reference/plot_upset.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise the overlap of edges between different networks — plot_upset","title":"Visualise the overlap of edges between different networks — plot_upset","text":"function creates UpSet plot intersections specific differences edges input networks.","code":""},{"path":"/reference/plot_upset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise the overlap of edges between different networks — plot_upset","text":"","code":"plot_upset(weightMatList, plotConnections)"},{"path":"/reference/plot_upset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise the overlap of edges between different networks — plot_upset","text":"weightMatList list (weighted) adjacency matrices; list element must adjacency matrix regulators rows, targets columns plotConnections number connections subset ","code":""},{"path":"/reference/plot_upset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise the overlap of edges between different networks — plot_upset","text":"UpSet plot. See UpSetR package details.","code":""},{"path":"/reference/plot_upset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise the overlap of edges between different networks — plot_upset","text":"","code":"weightMat1 <- matrix(   c(0.1, 0.4, 0.8, 0.3), nrow = 2, ncol = 2,   dimnames = list(\"regulators\" = c(\"r1\", \"r2\"), \"targets\" = c(\"t1\", \"t2\")) ) weightMat2 <- matrix(   c(0.1, 0.2, 0.8, 0.3), nrow = 2, ncol = 2,   dimnames = list(\"regulators\" = c(\"r1\", \"r2\"), \"targets\" = c(\"t1\", \"t2\")) ) plot_upset(list(weightMat1, weightMat2), 2)"},{"path":"/reference/preprocessExpressionMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-process the expression matrix before generating the shiny app — preprocessExpressionMatrix","title":"Pre-process the expression matrix before generating the shiny app — preprocessExpressionMatrix","text":"function denoises expression matrix using noisyR package normalises . recommended use function using generateShinyApp.","code":""},{"path":"/reference/preprocessExpressionMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-process the expression matrix before generating the shiny app — preprocessExpressionMatrix","text":"","code":"preprocessExpressionMatrix(   expression.matrix,   denoise = TRUE,   output.plot = FALSE,   normalisation.method = c(\"quantile\", \"rpm\", \"tmm\", \"deseq2\", \"median\"),   n_million = 1,   ... )"},{"path":"/reference/preprocessExpressionMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-process the expression matrix before generating the shiny app — preprocessExpressionMatrix","text":"expression.matrix expression matrix; rows correspond genes columns correspond samples denoise whether use noisyR denoise expression matrix; proceeding without denoising data recommended output.plot whether create expression-similarity plot noise analysis (printed console); default FALSE normalisation.method normalisation method used; default quantile; unrecognised input result normalisation applied, proceeding un-normalised data recommended; currently supported normalisation methods : quantile Quantile normalisation using normalize.quantiles function preprocessCore package rpm RPM (reads per million) normalisation, sample scaled 1 (using n_million parameter) million divided total number reads sample tmm Trimmed Mean M values normalisation using calcNormFactors function edgeR package deseq2 Size factor normalisation using estimateSizeFactorsForMatrix function DESeq2 package median Normalisation using median, sample scaled median expression sample divided total number reads sample n_million scaling factor RPM normalisation; default 1 million ... optional arguments passed noisyr::noisyr_counts()","code":""},{"path":"/reference/preprocessExpressionMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-process the expression matrix before generating the shiny app — preprocessExpressionMatrix","text":"denoised, normalised expression matrix; rows (genes) may removed noisyR.","code":""},{"path":"/reference/preprocessExpressionMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-process the expression matrix before generating the shiny app — preprocessExpressionMatrix","text":"","code":"expression.matrix <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:10, 1:4] expression.matrix.preproc <- preprocessExpressionMatrix(expression.matrix) #> >>> noisyR counts approach pipeline <<< #> The input matrix has 10 rows and 4 cols #>     number of genes: 10 #>     number of samples: 4 #> Calculating the number of elements per window #>     the number of elements per window is 1 #>     the step size is 1 #>     the selected similarity metric is correlation_pearson #>   Working with sample 1 #>   Working with sample 2 #>   Working with sample 3 #>   Working with sample 4 #> Similarity calculation produced too many NAs, returning zero... #> Denoising expression matrix... #>     removing noisy genes #>     adjusting matrix #> >>> Done! <<< #> Performing quantile normalisation... #> Done!"},{"path":"/reference/preprocess_miRTarBase.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a comparison table for miRTarBase to be used for custom integration — preprocess_miRTarBase","title":"Creates a comparison table for miRTarBase to be used for custom integration — preprocess_miRTarBase","text":"function downloads miRTarBase database organism choice, filters according user-specified values formats ready custom integration generateShinyApp.","code":""},{"path":"/reference/preprocess_miRTarBase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a comparison table for miRTarBase to be used for custom integration — preprocess_miRTarBase","text":"","code":"preprocess_miRTarBase(   download.dir = \".\",   download.method = \"auto\",   mirtarbase.file = NULL,   organism.code,   org.db,   support.type = c(),   validation.method = c(),   reference = c(\"mRNA\", \"miRNA\"),   print.support.types = FALSE,   print.validation.methods = FALSE )"},{"path":"/reference/preprocess_miRTarBase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a comparison table for miRTarBase to be used for custom integration — preprocess_miRTarBase","text":"download.dir Directory miRTarBase database downloaded. download.method Method downloading miRTarBase file download.file, see download.file documentation options operating system. mirtarbase.file Path pre-downloaded miRTarBase file organism. left NULL file downloaded. organism.code Three letter code organism choice. See miRTarBase website options. human, enter 'hsa' mouse, 'mmu'. org.db database annotations transform ENSEMBL IDs gene names; list bioconductor packaged databases can found BiocManager::available(\"^org\\.\"). support.type Subset entries 'Support Type' field miRTarBase. values kept. find options available organism choice, run function print.support.types = TRUE. validation.method Subset entries 'Experiments' field miRTarBase. values kept. find options available organism choice, run function print.validation.methods = TRUE. reference reference category mRNA miRNA? reference category chosen must match reference category chosen custom.integration generateShinyApp. Default mRNA. print.support.types, print.validation.methods options Support Type Experiments displayed? Default FALSE.","code":""},{"path":"/reference/preprocess_miRTarBase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a comparison table for miRTarBase to be used for custom integration — preprocess_miRTarBase","text":"dataframe Reference_ID/Name Comparison_ID/Name columns can supplied custom.integration generateShinyApp","code":""},{"path":"/reference/preprocess_miRTarBase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a comparison table for miRTarBase to be used for custom integration — preprocess_miRTarBase","text":"","code":"comparison.table <- preprocess_miRTarBase(   mirtarbase.file = system.file(\"extdata\", \"mmu_MTI_sub.xls\", package = \"bulkAnalyseR\"),   organism.code = \"mmu\",   org.db = \"org.Mm.eg.db\",   support.type = \"Functional MTI\",   validation.method = \"Luciferase reporter assay\",   reference = \"miRNA\")"},{"path":"/reference/QCpanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the QC panel of the shiny app — QCpanel","title":"Generate the QC panel of the shiny app — QCpanel","text":"UI server components QC panel shiny app. generated including 'QC' panels.default argument generateShinyApp.","code":""},{"path":"/reference/QCpanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the QC panel of the shiny app — QCpanel","text":"","code":"QCpanelUI(id, metadata, show = TRUE)  QCpanelServer(id, expression.matrix, metadata, anno)"},{"path":"/reference/QCpanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the QC panel of the shiny app — QCpanel","text":"id input slot used access value metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 show whether show panel ; default TRUE; compatibility specifying panels show expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 anno annotation data frame containing match row names expression.matrix (usually ENSEMBL IDs) gene names rendered within app output files; object created generateShinyApp using org.db specified","code":""},{"path":"/reference/QCpanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the QC panel of the shiny app — QCpanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/rescale_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale a matrix — rescale_matrix","title":"Rescale a matrix — rescale_matrix","text":"function rescales rows matrix according specified type.","code":""},{"path":"/reference/rescale_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale a matrix — rescale_matrix","text":"","code":"rescale_matrix(   mat,   type = c(\"Expression\", \"Log2 Expression\", \"Mean Scaled\", \"Z-score\") )"},{"path":"/reference/rescale_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale a matrix — rescale_matrix","text":"mat matrix rescale type type rescaling; one \"Expression\" (defautl, nothing), \"Log2 Expression\" (returns log2(x + 1) every value), \"Mean Scaled\" (row scaled average), \"Z-score\" (row centered scaled mean = 0 sd = 1)","code":""},{"path":"/reference/rescale_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale a matrix — rescale_matrix","text":"rescaled matrix.","code":""},{"path":"/reference/rescale_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale a matrix — rescale_matrix","text":"","code":"mat = matrix(1:10, nrow = 2, ncol = 5) rescale_matrix(mat, type = \"Expression\") #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    3    5    7    9 #> [2,]    2    4    6    8   10 rescale_matrix(mat, type = \"Log2 Expression\") #>          [,1]     [,2]     [,3]     [,4]     [,5] #> [1,] 1.000000 2.000000 2.584963 3.000000 3.321928 #> [2,] 1.584963 2.321928 2.807355 3.169925 3.459432 rescale_matrix(mat, type = \"Mean Scaled\") #>           [,1]      [,2] [,3]     [,4]     [,5] #> [1,] 0.2000000 0.6000000    1 1.400000 1.800000 #> [2,] 0.3333333 0.6666667    1 1.333333 1.666667 rescale_matrix(mat, type = \"Z-score\") #>           [,1]       [,2] [,3]      [,4]     [,5] #> [1,] -1.264911 -0.6324555    0 0.6324555 1.264911 #> [2,] -1.264911 -0.6324555    0 0.6324555 1.264911 #> attr(,\"scaled:center\") #> [1] 5 6 #> attr(,\"scaled:scale\") #> [1] 3.162278 3.162278"},{"path":"/reference/sampleSelectPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the sample select panel of the shiny app — sampleSelectPanel","title":"Generate the sample select panel of the shiny app — sampleSelectPanel","text":"UI server components sample selection panel shiny app. generated including 'SampleSelect' panels.default argument generateShinyApp.","code":""},{"path":"/reference/sampleSelectPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the sample select panel of the shiny app — sampleSelectPanel","text":"","code":"sampleSelectPanelUI(id, metadata, show = TRUE)  sampleSelectPanelServer(id, expression.matrix, metadata, modality = \"RNA\")"},{"path":"/reference/sampleSelectPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the sample select panel of the shiny app — sampleSelectPanel","text":"id input slot used access value metadata data frame containing metadata samples contained expression.matrix; must contain minimum two columns: first column must contain column names expression.matrix, last column assumed contain experimental conditions tested differential expression; list  (length modality) can provided #' length(modality) > 1 show whether show panel ; default TRUE; compatibility specifying panels show expression.matrix expression matrix; rows correspond genes columns correspond samples; usually preprocessed preprocessExpressionMatrix; list  (length modality) can provided #' length(modality) > 1 modality modality, needs passed used within another shiny module namespacing reasons","code":""},{"path":"/reference/sampleSelectPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the sample select panel of the shiny app — sampleSelectPanel","text":"UI Server components shiny module, can used within UI Server definitions shiny app.","code":""},{"path":"/reference/volcano_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a volcano plot visualising differential expression (DE) results — volcano_plot","title":"Create a volcano plot visualising differential expression (DE) results — volcano_plot","text":"function creates volcano plot visualise results DE analysis. volcano_enhance called indirectly volcano_plot add extra features.","code":""},{"path":"/reference/volcano_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a volcano plot visualising differential expression (DE) results — volcano_plot","text":"","code":"volcano_plot(   genes.de.results,   pval.threshold = 0.05,   lfc.threshold = 1,   alpha = 0.1,   xlims = NULL,   log10pval.cap = TRUE,   add.colours = TRUE,   add.expression.colour.gradient = TRUE,   add.guide.lines = TRUE,   add.labels.auto = TRUE,   add.labels.custom = FALSE,   ... )  volcano_enhance(   vp,   df,   pval.threshold,   lfc.threshold,   alpha,   add.colours,   point.colours = c(\"#bfbfbf\", \"orange\", \"red\", \"blue\"),   raster = FALSE,   add.expression.colour.gradient,   colour.gradient.scale = list(left = c(\"#99e6ff\", \"#000066\"), right = c(\"#99e6ff\",     \"#000066\")),   colour.gradient.breaks = waiver(),   colour.gradient.limits = NULL,   add.guide.lines,   guide.line.colours = c(\"green\", \"blue\"),   add.labels.auto,   add.labels.custom,   annotation = NULL,   n.labels.auto = c(5, 5, 5),   genes.to.label = NULL,   seed = 0,   label.force = 1 )"},{"path":"/reference/volcano_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a volcano plot visualising differential expression (DE) results — volcano_plot","text":"genes.de.results table DE genes, usually generated DEanalysis_edger pval.threshold, lfc.threshold p-value /log2(fold-change) thresholds determine whether gene DE alpha transparency points; ignored DE genes add.expression.colour.gradient TRUE; default 0.1 xlims single value create (symmetric) x-axis limits; default inferred data log10pval.cap whether cap log10(p-value -10); p-values lower 10^(-10) set cap plotting add.colours whether colour genes based log2(fold-change) -log10(p-value); default TRUE add.expression.colour.gradient whether add colour gradient DE genes present log2(expression); default TRUE add.guide.lines whether add vertical horizontal guide lines plot highlight thresholds; default TRUE add.labels.auto whether automatically label genes highest |log2(fold-change)| expression; default TRUE add.labels.custom whether add labels user-specified genes; parameter genes..label must also specified; default FALSE ... parameters passed volcano_enhance vp volcano plot ggplot object (usually passed volcano_plot) df data frame DE results genes (usually passed volcano_plot) point.colours vector 4 colours colour genes pval lfc thresholds, just pval threshold, just lfc threshold, pval lfc threshold (DE genes) respectively; used add.colours TRUE raster whether rasterize non-DE genes ggraster reduce memory usage; particularly useful saving plots files colour.gradient.scale vector two colours create colour gradient colouring DE genes based expression; named list components left right can supplied use two different colour scales; used add.expression.colour.gradient TRUE colour.gradient.breaks, colour.gradient.limits parameters customise legend colour gradient scale; especially useful creating multiple plots plot two scales; used add.expression.colour.gradient TRUE guide.line.colours vector two colours used colour guide lines; first colour used p-value log2(fold-change) thresholds second double values annotation annotation data frame containing match gene field df (usually ENSEMBL IDs) gene names shown plot labels; necessary df already contains gene names n.labels.auto integer vector length 3 denoting number genes automatically labelled; first entry corresponds DE genes lowest p-value, second highest absolute log2(fold-change) third highest expression; single integer can also specified, used 3 entries; default 5 genes..label vector gene names labelled plot; names present shown labels (values ones matched - allow custom gene names presented) seed random seed used reproducibility; used ggrepel::geom_label_repel labels present label.force passed force argument ggrepel::geom_label_repel; higher values make labels overlap less (cost away points labelling)","code":""},{"path":"/reference/volcano_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a volcano plot visualising differential expression (DE) results — volcano_plot","text":"volcano plot ggplot object. enhanced volcano plot ggplot object.","code":""},{"path":"/reference/volcano_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a volcano plot visualising differential expression (DE) results — volcano_plot","text":"","code":"expression.matrix.preproc <- as.matrix(read.csv(   system.file(\"extdata\", \"expression_matrix_preprocessed.csv\", package = \"bulkAnalyseR\"),    row.names = 1 ))[1:500, 1:4]  anno <- AnnotationDbi::select(   getExportedValue('org.Mm.eg.db', 'org.Mm.eg.db'),   keys = rownames(expression.matrix.preproc),   keytype = 'ENSEMBL',   columns = 'SYMBOL' ) %>%   dplyr::distinct(ENSEMBL, .keep_all = TRUE) %>%   dplyr::mutate(NAME = ifelse(is.na(SYMBOL), ENSEMBL, SYMBOL)) #> 'select()' returned 1:many mapping between keys and columns    edger <- DEanalysis_edger(   expression.matrix = expression.matrix.preproc,   condition = rep(c(\"0h\", \"12h\"), each = 2),   var1 = \"0h\",   var2 = \"12h\",   anno = anno ) vp <- volcano_plot(edger) print(vp)"}]
